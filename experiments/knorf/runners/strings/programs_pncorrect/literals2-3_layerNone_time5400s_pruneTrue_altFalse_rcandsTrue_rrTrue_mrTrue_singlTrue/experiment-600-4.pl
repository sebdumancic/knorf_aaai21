
:-['../playgol'].
:-['string-bk'].
:-['../metagol'].

:-['./programs_pncorrect/literals2-3_layerNone_time5400s_pruneTrue_altFalse_rcandsTrue_rrTrue_mrTrue_singlTrue/refactored_primitives-600-4.pl'].



:- use_module(library(time)).

play_time_interval(2).
max_build_time(60).
max_play_depth(4).
max_build_depth(5).
cpus(4).

metagol:functional.
%% metagol:max_clauses(10).

func_test([P,s(In,Out1),s(_,[])],PS,G):-
  \+ (metagol :prove_deduce([[P,s(In,Out2),s(_,[])]],PS,G),Out1\= Out2).



%% tell metagol to use the BK
prim(is_empty/1).
prim(not_empty/1). % maybe?

prim(is_space/1).
prim(not_space/1). % maybe?

prim(is_uppercase/1).
prim(is_lowercase/1).

prim(is_letter/1).
prim(not_letter/1).

prim(is_number/1).
prim(not_number/1).

prim(copy1/2).
prim(skip1/2).
prim(mk_uppercase/2).
prim(mk_lowercase/2).
%% prim(write1/3).

prim(latent216_2/2).
prim(latent53_3/2).
prim(latent1535_2/2).
prim(latent331_2/2).
prim(latent11_2/2).
prim(latent1970_2/2).
prim(latent207_2/2).
prim(latent289_2/2).
prim(latent51_3/2).
prim(latent1538_2/2).
prim(latent45_3/2).
prim(latent71_3/2).
prim(latent226_2/2).
prim(latent134_2/2).
prim(latent29_3/2).
prim(latent40_3/2).
prim(latent46_3/2).
prim(latent364_2/2).
prim(latent398_2/2).
prim(latent16_2/2).
prim(latent1164_2/2).
prim(latent25_3/2).
prim(latent57_2/2).
prim(latent1497_2/2).
prim(latent440_3/2).
prim(latent20_3/2).
prim(latent91_2/2).
prim(latent592_3/2).
prim(latent62_3/2).
prim(latent24_3/2).
prim(latent189_2/2).
prim(latent187_2/2).
prim(latent201_2/2).
prim(latent182_2/2).
prim(latent856_3/2).
prim(latent859_3/2).
prim(latent249_2/2).
prim(latent897_3/2).
prim(latent436_2/2).
prim(latent991_3/2).
prim(latent299_2/2).
prim(latent3_2/2).
prim(latent6_2/2).
prim(latent211_2/2).
prim(latent271_2/2).
prim(latent61_2/2).
prim(latent957_3/2).
prim(latent1849_2/2).
prim(latent879_3/2).
prim(latent1029_3/2).
prim(latent200_2/2).
prim(latent886_3/2).
prim(latent2_2/2).
prim(latent602_3/2).
prim(latent90_2/2).
prim(latent1/2).
prim(latent738_2/2).
prim(latent919_3/2).
prim(latent138_2/2).
prim(latent938_3/2).
prim(latent12_2/2).
prim(latent575_2/2).
prim(latent309_2/2).
prim(latent119_2/2).
prim(latent231_2/2).
prim(latent43_3/2).
prim(latent21_2/2).
prim(latent1128_2/2).
prim(latent301_3/2).
prim(latent154_2/2).
prim(latent1448_2/2).
prim(latent339_2/2).
prim(latent165_2/2).
prim(latent37_3/2).
prim(latent1047_3/2).
prim(latent1267_3/2).
prim(latent222_2/2).
prim(latent320_2/2).
prim(latent653_2/2).
prim(latent1608_3/2).
prim(latent665_2/2).
prim(latent219_2/2).
prim(latent332_2/2).
prim(latent405_3/2).
prim(latent218_2/2).
prim(latent267_2/2).
prim(latent641_2/2).
prim(latent1005_3/2).
prim(latent281_2/2).
prim(latent195_2/2).
prim(latent8/2).
prim(latent162_2/2).
prim(latent225_2/2).
prim(latent176_2/2).
prim(latent52_3/2).
prim(latent1688_3/2).
prim(latent943_3/2).
prim(latent1350_2/2).
prim(latent308_2/2).
prim(latent232_3/2).
prim(latent1039_3/2).
prim(latent205_2/2).
prim(latent975_3/2).
prim(latent628_2/2).
prim(latent5_2/2).
prim(latent999_3/2).
prim(latent69_3/2).
prim(latent110_2/2).
prim(latent257_2/2).
prim(latent4/2).
prim(latent1324_3/2).
prim(latent186_2/2).
prim(latent252_2/2).
prim(latent279_2/2).
prim(latent268_2/2).
prim(latent251_2/2).
prim(latent297_2/2).
prim(latent1051_2/2).
prim(latent122_2/2).
prim(latent1828_2/2).
prim(latent498_2/2).
prim(latent28_2/2).
prim(latent1004_3/2).
prim(latent1867_2/2).
prim(latent228_2/2).
prim(latent953_2/2).
prim(latent305_2/2).
prim(latent850_3/2).
prim(latent13_2/2).
prim(latent99_2/2).
prim(latent197_2/2).
prim(latent1175_3/2).
prim(latent468_3/2).
prim(latent839_3/2).
prim(latent196_2/2).
prim(latent41_3/2).
prim(latent54_3/2).
prim(latent94_2/2).
prim(latent1571_3/2).
prim(latent274_2/2).
prim(latent772_3/2).
prim(latent233_2/2).
prim(latent39_3/2).
prim(latent959_3/2).
prim(latent77_3/2).
prim(latent1052_3/2).
prim(latent1091_3/2).
prim(latent844_3/2).
prim(latent209_2/2).
prim(latent151_2/2).
prim(latent9_2/2).
prim(latent238_2/2).
prim(latent32_3/2).
prim(latent1078_2/2).
prim(latent63_3/2).
prim(latent778_3/2).
prim(latent450_2/2).
prim(latent459_3/2).
prim(latent312_2/2).
prim(latent927_3/2).
prim(latent1085_3/2).
prim(latent491_3/2).
prim(latent35_3/2).
prim(latent1659_2/2).
prim(latent92/2).
prim(latent1812_3/2).
prim(latent1189_2/2).
prim(latent388_2/2).
prim(latent809_2/2).
prim(latent362_3/2).
prim(latent217_2/2).
prim(latent355_2/2).
prim(latent10_2/2).
prim(latent208_2/2).
prim(latent129_2/2).
prim(latent167_2/2).
prim(latent291_2/2).
prim(latent1420_2/2).
prim(latent107_2/2).
prim(latent42_3/2).
prim(latent23_3/2).
prim(latent38_3/2).
prim(latent33_3/2).
prim(latent512_2/2).
prim(latent321_2/2).
prim(latent577_2/2).
prim(latent1255_2/2).
prim(latent336_2/2).
prim(latent181_2/2).
prim(latent7/2).
prim(latent183_2/2).
prim(latent34_3/2).
prim(latent81_3/2).
prim(latent198_2/2).
prim(latent212_2/2).
prim(latent239_2/2).
prim(latent17_2/2).
prim(latent762_3/2).
prim(latent27_3/2).
prim(latent1032_3/2).
prim(latent194_2/2).
prim(latent635_2/2).
prim(latent14_2/2).
prim(latent911_2/2).
prim(latent994_3/2).
prim(latent1377_2/2).
prim(latent334_2/2).
prim(latent906_3/2).
prim(latent15_2/2).
prim(p3/2).
prim(p8/2).
prim(p24/2).
prim(p25/2).
prim(p49/2).
prim(p51/2).
prim(p55/2).
prim(p59/2).
prim(p63/2).
prim(p111/2).
prim(p169/2).
prim(p177/2).
prim(p233/2).
prim(p255/2).
prim(p286/2).
prim(p4/2).
prim(p37/2).
prim(p58/2).
prim(p65/2).
prim(p70/2).
prim(p70/2).
prim(p78/2).
prim(p78/2).
prim(p110/2).
prim(p121/2).
prim(p150/2).
prim(p185/2).
prim(p193/2).
prim(p217/2).
prim(p221/2).
prim(p221/2).
prim(p249/2).
prim(p249/2).
prim(p263/2).
prim(p293/2).
prim(p295/2).
prim(p295/2).
prim(p317/2).
prim(p321/2).
prim(p324/2).
prim(p332/2).
prim(p332/2).
prim(p339/2).
prim(p364/2).
prim(p364/2).
prim(p366/2).
prim(p375/2).
prim(p386/2).
prim(p386/2).
prim(p404/2).
prim(p404/2).
prim(p437/2).
prim(p437/2).
prim(p441/2).
prim(p446/2).
prim(p446/2).
prim(p459/2).
prim(p459/2).
prim(p463/2).
prim(p486/2).
prim(p524/2).
prim(p535/2).
prim(p538/2).
prim(p586/2).
prim(p586/2).
prim(p600/2).
prim(p161/2).
prim(p172/2).
prim(p363/2).
prim(p398/2).
prim(p411/2).
prim(p472/2).
prim(p497/2).
prim(p584/2).
prim(p6/2).
prim(p18/2).
prim(p19/2).
prim(p30/2).
prim(p40/2).
prim(p80/2).
prim(p94/2).
prim(p95/2).
prim(p97/2).
prim(p106/2).
prim(p114/2).
prim(p125/2).
prim(p131/2).
prim(p136/2).
prim(p139/2).
prim(p144/2).
prim(p147/2).
prim(p181/2).
prim(p188/2).
prim(p191/2).
prim(p192/2).
prim(p211/2).
prim(p214/2).
prim(p243/2).
prim(p256/2).
prim(p266/2).
prim(p281/2).
prim(p283/2).
prim(p285/2).
prim(p304/2).
prim(p309/2).
prim(p341/2).
prim(p344/2).
prim(p353/2).
prim(p367/2).
prim(p373/2).
prim(p389/2).
prim(p400/2).
prim(p409/2).
prim(p420/2).
prim(p445/2).
prim(p448/2).
prim(p453/2).
prim(p458/2).
prim(p482/2).
prim(p508/2).
prim(p521/2).
prim(p526/2).
prim(p534/2).
prim(p563/2).
prim(p581/2).
prim(p13/2).
prim(p26/2).
prim(p31/2).
prim(p39/2).
prim(p42/2).
prim(p44/2).
prim(p46/2).
prim(p64/2).
prim(p67/2).
prim(p74/2).
prim(p96/2).
prim(p101/2).
prim(p119/2).
prim(p123/2).
prim(p176/2).
prim(p189/2).
prim(p223/2).
prim(p226/2).
prim(p244/2).
prim(p250/2).
prim(p257/2).
prim(p298/2).
prim(p299/2).
prim(p302/2).
prim(p394/2).
prim(p220/2).
prim(p20/2).
prim(p22/2).
prim(p23/2).
prim(p127/2).
prim(p127/2).
prim(p137/2).
prim(p141/2).
prim(p141/2).
prim(p180/2).
prim(p271/2).
prim(p296/2).
prim(p318/2).
prim(p333/2).
prim(p369/2).
prim(p410/2).
prim(p410/2).
prim(p599/2).
prim(p7/2).
prim(p33/2).
prim(p48/2).
prim(p81/2).
prim(p102/2).
prim(p115/2).
prim(p117/2).
prim(p124/2).
prim(p145/2).
prim(p174/2).
prim(p175/2).
prim(p206/2).
prim(p231/2).
prim(p284/2).
prim(p288/2).
prim(p313/2).
prim(p340/2).
prim(p342/2).
prim(p348/2).
prim(p349/2).
prim(p371/2).
prim(p372/2).
prim(p401/2).
prim(p402/2).
prim(p421/2).
prim(p506/2).
prim(p514/2).
prim(p532/2).
prim(p1/2).
prim(p14/2).
prim(p15/2).
prim(p27/2).
prim(p32/2).
prim(p41/2).
prim(p45/2).
prim(p84/2).
prim(p90/2).
prim(p107/2).
prim(p108/2).
prim(p109/2).
prim(p116/2).
prim(p133/2).
prim(p160/2).
prim(p163/2).
prim(p179/2).
prim(p196/2).
prim(p202/2).
prim(p207/2).
prim(p216/2).
prim(p228/2).
prim(p240/2).
prim(p265/2).
prim(p272/2).
prim(p282/2).
prim(p294/2).
prim(p305/2).
prim(p310/2).
prim(p320/2).
prim(p322/2).
prim(p327/2).
prim(p338/2).
prim(p354/2).
prim(p365/2).
prim(p391/2).
prim(p395/2).
prim(p413/2).
prim(p416/2).
prim(p433/2).
prim(p436/2).
prim(p438/2).
prim(p438/2).
prim(p443/2).
prim(p469/2).
prim(p488/2).
prim(p499/2).
prim(p517/2).
prim(p546/2).
prim(p585/2).
prim(p170/2).
prim(p2/2).
prim(p36/2).
prim(p87/2).
prim(p88/2).
prim(p104/2).
prim(p113/2).
prim(p120/2).
prim(p129/2).
prim(p132/2).
prim(p140/2).
prim(p152/2).
prim(p165/2).
prim(p171/2).
prim(p182/2).
prim(p218/2).
prim(p237/2).
prim(p253/2).
prim(p287/2).
prim(p300/2).
prim(p300/2).
prim(p311/2).
prim(p314/2).
prim(p315/2).
prim(p316/2).
prim(p325/2).
prim(p346/2).
prim(p352/2).
prim(p361/2).
prim(p368/2).
prim(p381/2).
prim(p384/2).
prim(p385/2).
prim(p392/2).
prim(p419/2).
prim(p452/2).
prim(p457/2).
prim(p470/2).
prim(p476/2).
prim(p490/2).
prim(p494/2).
prim(p495/2).
prim(p503/2).
prim(p511/2).
prim(p513/2).
prim(p518/2).
prim(p520/2).
prim(p520/2).
prim(p540/2).
prim(p542/2).
prim(p561/2).
prim(p570/2).
prim(p589/2).
prim(p5/2).
prim(p29/2).
prim(p52/2).
prim(p56/2).
prim(p93/2).
prim(p93/2).
prim(p100/2).
prim(p200/2).
prim(p227/2).
prim(p241/2).
prim(p242/2).
prim(p267/2).
prim(p382/2).
prim(p509/2).
prim(p515/2).
prim(p550/2).
prim(p564/2).
prim(p569/2).
prim(p572/2).
prim(p573/2).
prim(p590/2).
prim(p597/2).
prim(p16/2).
prim(p166/2).
prim(p209/2).
prim(p238/2).
prim(p274/2).
prim(p487/2).
prim(p21/2).
prim(p34/2).
prim(p35/2).
prim(p61/2).
prim(p66/2).
prim(p153/2).
prim(p156/2).
prim(p158/2).
prim(p167/2).
prim(p187/2).
prim(p190/2).
prim(p194/2).
prim(p208/2).
prim(p210/2).
prim(p212/2).
prim(p219/2).
prim(p258/2).
prim(p259/2).
prim(p261/2).
prim(p360/2).
prim(p362/2).
prim(p374/2).
prim(p426/2).
prim(p449/2).
prim(p455/2).
prim(p461/2).
prim(p466/2).
prim(p466/2).
prim(p468/2).
prim(p484/2).
prim(p529/2).
prim(p533/2).
prim(p543/2).
prim(p552/2).
prim(p558/2).
prim(p560/2).
prim(p566/2).
prim(p582/2).
prim(p588/2).
prim(p592/2).
prim(p229/2).
prim(p229/2).
prim(p247/2).
prim(p247/2).
prim(p357/2).
prim(p357/2).
prim(p378/2).
prim(p370/2).
prim(p370/2).
prim(p393/2).
prim(p393/2).
prim(p268/2).
prim(p268/2).

metarule(precon,[P/2,Q/1,R/2],([P,A,B]:-[[Q,A],[R,A,B]])).
metarule(postcon,[P/2,Q/2,R/1],([P,A,B]:-[[Q,A,B],[R,B]])).
metarule(chain,[P/2,Q/2,R/2],([P,A,B]:-[[Q,A,C],[R,C,B]])).
metarule(tailrec,[P/2,Q/2],([P,A,B]:-[[Q,A,C],[P,C,B]])).
%% metarule(curry3,[P/2,Q/3,C/0],([P,A,B]:-[[Q,A,B,C]])).

  
a:-
    cpus(CPU_COUNT),
    set_prolog_flag(cpu_count,CPU_COUNT),
    games(Games),
    playgol(Games),
    b,
    halt.

b:-
    cpus(CPU_COUNT),
    set_prolog_flag(cpu_count,CPU_COUNT),
    %get_time(T),
    %stamp_date_time(T, date(DY,DM,DD,TH,TM,TS,_,_,_), 'UTC'),
    %format('% started solving build tasks at ~w ~w ~w ~w:~w:~w\n', [DD, DM, DY, TH, TM, TS]),
    max_build_depth(BuildDepth),
    playgol:update_depth(BuildDepth),
    max_build_time(BuildTime),
    retractall(max_time(_)),
    assert(max_time(BuildTime)),
    tasks(Tasks),
    learn_tasks(Tasks,Progs),
    length(Progs,N),
    format('% num solved ~w\n',[N]),
    %get_time(T2),
    %stamp_date_time(T2, date(DY2,DM2,DD2,TH2,TM2,TS2,_,_,_), 'UTC'),
    %format('% finished solving build tasks at ~w ~w ~w ~w:~w:~w\n', [DD2, DM2, DY2, TH2, TM2, TS2]),
    halt.

learn_tasks(Tasks,Progs):-
    concurrent_maplist(learn_aux,Tasks,Xs),
    findall(true,member(true,Xs),Progs).

learn_aux(T,true):-
    train_examples(T,Pos,Neg),
    max_time(MaxTime),
    get_time(TTT),
    stamp_date_time(TTT, date(DY,DM,DD,TH,TM,TS,_,_,_), 'UTC'),
    format('% started solving build task at ~w ~w ~w ~w:~w:~w\n', [DD, DM, DY, TH, TM, TS]),
    catch(call_with_time_limit(MaxTime,learn(Pos,Neg,Prog)),time_limit_exceeded,(writeln('%timeout'),false)),!,
    get_time(TTT2),
    stamp_date_time(TTT2, date(DY2,DM2,DD2,TH2,TM2,TS2,_,_,_), 'UTC'),
    format('% finished solving build tasks at ~w ~w ~w ~w:~w:~w\n', [DD2, DM2, DY2, TH2, TM2, TS2]),
    pprint(Prog).
learn_aux(_,false).

do_test:-
    tasks(Tasks),
    maplist(do_test,Tasks),
    halt.

do_test(Task):-
    test_examples(Task,Pos),
    (current_predicate(Task/2) ->
        (
            format('%solved,~w,~w\n',[Task,1]),
            forall(member(X,Pos),(call(X) -> format('~w,~w\n',[1,1]); format('~w,~w\n',[1,0])))
        );
        (
            format('%solved,~w,~w\n',[Task,0]),
            forall(member(_,Pos),format('~w,~w\n',[0,0]))
        )).

gen_e(Task,Input,Output,Out):-
    Out=..[Task,s(Input,Output),s(_,[])].

play_examples(Task,Pos,[]):-
    findall(X,(play_pos(Task,A,B),gen_e(Task,A,B,X)),Pos1),
    sort_examples(Pos1,Pos).

train_examples(Task,Pos,[]):-
    findall(X,(build_pos(Task,A,B),gen_e(Task,A,B,X)),Pos1),
    sort_examples(Pos1,Pos).

test_examples(Task,Pos):-
    findall(X,(test_pos(Task,A,B),gen_e(Task,A,B,X)),Pos).

add_len(Atom,Len-Atom):-
    Atom=..[_Task,s(Input,_Output),s(_,[])],
    length(Input,Len).
remove_len(_-Atom,Atom).

sort_examples(L1,L2):-
  maplist(add_len,L1,L3),
  keysort(L3,L4),
  maplist(remove_len,L4,L2).

