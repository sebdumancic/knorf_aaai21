
:-['../playgol'].
:-['string-bk'].
:-['../metagol'].

:-['./programs_pncorrect/literals2-3_layerNone_time5400s_pruneTrue_altFalse_rcandsTrue_rrTrue_mrTrue_singlTrue/refactored_primitives-600-9.pl'].



:- use_module(library(time)).

play_time_interval(2).
max_build_time(60).
max_play_depth(4).
max_build_depth(5).
cpus(4).

metagol:functional.
%% metagol:max_clauses(10).

func_test([P,s(In,Out1),s(_,[])],PS,G):-
  \+ (metagol :prove_deduce([[P,s(In,Out2),s(_,[])]],PS,G),Out1\= Out2).



%% tell metagol to use the BK
prim(is_empty/1).
prim(not_empty/1). % maybe?

prim(is_space/1).
prim(not_space/1). % maybe?

prim(is_uppercase/1).
prim(is_lowercase/1).

prim(is_letter/1).
prim(not_letter/1).

prim(is_number/1).
prim(not_number/1).

prim(copy1/2).
prim(skip1/2).
prim(mk_uppercase/2).
prim(mk_lowercase/2).
%% prim(write1/3).

prim(latent234_2/2).
prim(latent1348_3/2).
prim(latent14_2/2).
prim(latent283_2/2).
prim(latent935_2/2).
prim(latent1280_3/2).
prim(latent1/2).
prim(latent1851_3/2).
prim(latent72_3/2).
prim(latent225_2/2).
prim(latent1282_3/2).
prim(latent363_2/2).
prim(latent1330_3/2).
prim(latent467_3/2).
prim(latent46_3/2).
prim(latent249_2/2).
prim(latent94_2/2).
prim(latent1413_3/2).
prim(latent1226_3/2).
prim(latent88_3/2).
prim(latent316_2/2).
prim(latent125_2/2).
prim(latent1306_3/2).
prim(latent415_2/2).
prim(latent845_2/2).
prim(latent1318_3/2).
prim(latent256_2/2).
prim(latent1811_2/2).
prim(latent261_3/2).
prim(latent228_2/2).
prim(latent1243_3/2).
prim(latent1311_3/2).
prim(latent29_3/2).
prim(latent288_2/2).
prim(latent690_3/2).
prim(latent524_3/2).
prim(latent100_2/2).
prim(latent546_2/2).
prim(latent370_2/2).
prim(latent1100_2/2).
prim(latent1053_2/2).
prim(latent753_3/2).
prim(latent647_2/2).
prim(latent1251_3/2).
prim(latent308_2/2).
prim(latent1236_3/2).
prim(latent267_2/2).
prim(latent40_2/2).
prim(latent1288_3/2).
prim(latent1789_2/2).
prim(latent1833_2/2).
prim(latent18_3/2).
prim(latent23_2/2).
prim(latent176_2/2).
prim(latent236_3/2).
prim(latent126_2/2).
prim(latent244_2/2).
prim(latent324_2/2).
prim(latent48_3/2).
prim(latent1771_2/2).
prim(latent186_2/2).
prim(latent5_2/2).
prim(latent352_2/2).
prim(latent19_3/2).
prim(latent91_2/2).
prim(latent284_2/2).
prim(latent924_2/2).
prim(latent327_2/2).
prim(latent43_3/2).
prim(latent1153_3/2).
prim(latent9_2/2).
prim(latent1899_2/2).
prim(latent1596_2/2).
prim(latent86_2/2).
prim(latent1423_3/2).
prim(latent35_3/2).
prim(latent231_2/2).
prim(latent37_3/2).
prim(latent1003_2/2).
prim(latent102_2/2).
prim(latent27_3/2).
prim(latent56_3/2).
prim(latent15_2/2).
prim(latent510_3/2).
prim(latent85_2/2).
prim(latent54_3/2).
prim(latent20_3/2).
prim(latent248_2/2).
prim(latent226_2/2).
prim(latent1427_3/2).
prim(latent342_2/2).
prim(latent68/2).
prim(latent1379_3/2).
prim(latent716_3/2).
prim(latent13_2/2).
prim(latent142_2/2).
prim(latent31_3/2).
prim(latent1277_3/2).
prim(latent312_2/2).
prim(latent643_3/2).
prim(latent1370_3/2).
prim(latent1267_3/2).
prim(latent368_2/2).
prim(latent223_2/2).
prim(latent12_2/2).
prim(latent1191_3/2).
prim(latent8/2).
prim(latent210_2/2).
prim(latent1400_3/2).
prim(latent41_3/2).
prim(latent7_2/2).
prim(latent1574_2/2).
prim(latent30_3/2).
prim(latent3_2/2).
prim(latent1420_3/2).
prim(latent71_3/2).
prim(latent353_2/2).
prim(latent33_2/2).
prim(latent1741_2/2).
prim(latent362_2/2).
prim(latent67_2/2).
prim(latent1875_2/2).
prim(latent239_2/2).
prim(latent952_2/2).
prim(latent1343_3/2).
prim(latent39_3/2).
prim(latent340_2/2).
prim(latent1059_2/2).
prim(latent235_2/2).
prim(latent328_2/2).
prim(latent444_3/2).
prim(latent130_2/2).
prim(latent98_2/2).
prim(latent1308_3/2).
prim(latent61_3/2).
prim(latent1620_2/2).
prim(latent280_2/2).
prim(latent306_2/2).
prim(latent155_2/2).
prim(latent26_2/2).
prim(latent47_3/2).
prim(latent153_2/2).
prim(latent271_2/2).
prim(latent58_3/2).
prim(latent64_3/2).
prim(latent260_2/2).
prim(latent1864_2/2).
prim(latent110_2/2).
prim(latent330_3/2).
prim(latent624_3/2).
prim(latent2/2).
prim(latent354_2/2).
prim(latent568_2/2).
prim(latent1537_2/2).
prim(latent1301_3/2).
prim(latent220_2/2).
prim(latent740_2/2).
prim(latent150_2/2).
prim(latent195_2/2).
prim(latent1012_2/2).
prim(latent1232_3/2).
prim(latent482_2/2).
prim(latent397_2/2).
prim(latent791_3/2).
prim(latent251_2/2).
prim(latent65_3/2).
prim(latent298_2/2).
prim(latent1368_3/2).
prim(latent95_2/2).
prim(latent118_2/2).
prim(latent1388_3/2).
prim(latent4/2).
prim(latent21_2/2).
prim(latent11_2/2).
prim(latent106_2/2).
prim(latent10_2/2).
prim(latent45_3/2).
prim(latent192_2/2).
prim(latent430_2/2).
prim(latent90_2/2).
prim(latent395_2/2).
prim(latent1174_3/2).
prim(latent105_2/2).
prim(latent172_2/2).
prim(latent1131_3/2).
prim(latent36_3/2).
prim(latent1341_3/2).
prim(latent112_2/2).
prim(latent57_3/2).
prim(latent1257_3/2).
prim(latent6_2/2).
prim(p1/2).
prim(p17/2).
prim(p23/2).
prim(p35/2).
prim(p42/2).
prim(p48/2).
prim(p51/2).
prim(p140/2).
prim(p148/2).
prim(p160/2).
prim(p236/2).
prim(p279/2).
prim(p287/2).
prim(p579/2).
prim(p3/2).
prim(p14/2).
prim(p21/2).
prim(p24/2).
prim(p28/2).
prim(p32/2).
prim(p34/2).
prim(p39/2).
prim(p59/2).
prim(p60/2).
prim(p75/2).
prim(p96/2).
prim(p129/2).
prim(p145/2).
prim(p175/2).
prim(p177/2).
prim(p195/2).
prim(p201/2).
prim(p205/2).
prim(p213/2).
prim(p220/2).
prim(p223/2).
prim(p227/2).
prim(p230/2).
prim(p238/2).
prim(p243/2).
prim(p247/2).
prim(p268/2).
prim(p278/2).
prim(p282/2).
prim(p314/2).
prim(p316/2).
prim(p319/2).
prim(p333/2).
prim(p361/2).
prim(p362/2).
prim(p374/2).
prim(p439/2).
prim(p454/2).
prim(p477/2).
prim(p510/2).
prim(p516/2).
prim(p533/2).
prim(p559/2).
prim(p582/2).
prim(p583/2).
prim(p590/2).
prim(p441/2).
prim(p5/2).
prim(p11/2).
prim(p16/2).
prim(p47/2).
prim(p62/2).
prim(p70/2).
prim(p72/2).
prim(p78/2).
prim(p143/2).
prim(p200/2).
prim(p311/2).
prim(p378/2).
prim(p422/2).
prim(p423/2).
prim(p428/2).
prim(p483/2).
prim(p506/2).
prim(p511/2).
prim(p515/2).
prim(p546/2).
prim(p552/2).
prim(p7/2).
prim(p13/2).
prim(p13/2).
prim(p18/2).
prim(p20/2).
prim(p22/2).
prim(p25/2).
prim(p27/2).
prim(p68/2).
prim(p69/2).
prim(p69/2).
prim(p74/2).
prim(p98/2).
prim(p141/2).
prim(p141/2).
prim(p190/2).
prim(p190/2).
prim(p193/2).
prim(p193/2).
prim(p222/2).
prim(p233/2).
prim(p242/2).
prim(p242/2).
prim(p245/2).
prim(p245/2).
prim(p255/2).
prim(p274/2).
prim(p284/2).
prim(p286/2).
prim(p341/2).
prim(p343/2).
prim(p346/2).
prim(p366/2).
prim(p370/2).
prim(p376/2).
prim(p414/2).
prim(p419/2).
prim(p480/2).
prim(p508/2).
prim(p508/2).
prim(p531/2).
prim(p543/2).
prim(p581/2).
prim(p581/2).
prim(p589/2).
prim(p591/2).
prim(p66/2).
prim(p265/2).
prim(p348/2).
prim(p354/2).
prim(p415/2).
prim(p595/2).
prim(p46/2).
prim(p116/2).
prim(p179/2).
prim(p188/2).
prim(p209/2).
prim(p210/2).
prim(p214/2).
prim(p229/2).
prim(p320/2).
prim(p332/2).
prim(p373/2).
prim(p397/2).
prim(p397/2).
prim(p402/2).
prim(p432/2).
prim(p468/2).
prim(p476/2).
prim(p500/2).
prim(p536/2).
prim(p536/2).
prim(p2/2).
prim(p2/2).
prim(p38/2).
prim(p38/2).
prim(p44/2).
prim(p86/2).
prim(p90/2).
prim(p92/2).
prim(p99/2).
prim(p118/2).
prim(p119/2).
prim(p126/2).
prim(p147/2).
prim(p159/2).
prim(p173/2).
prim(p217/2).
prim(p217/2).
prim(p235/2).
prim(p252/2).
prim(p258/2).
prim(p272/2).
prim(p295/2).
prim(p322/2).
prim(p322/2).
prim(p324/2).
prim(p326/2).
prim(p429/2).
prim(p437/2).
prim(p446/2).
prim(p446/2).
prim(p457/2).
prim(p478/2).
prim(p479/2).
prim(p479/2).
prim(p488/2).
prim(p488/2).
prim(p537/2).
prim(p578/2).
prim(p599/2).
prim(p600/2).
prim(p560/2).
prim(p4/2).
prim(p29/2).
prim(p41/2).
prim(p45/2).
prim(p55/2).
prim(p79/2).
prim(p108/2).
prim(p110/2).
prim(p111/2).
prim(p122/2).
prim(p139/2).
prim(p157/2).
prim(p165/2).
prim(p166/2).
prim(p168/2).
prim(p171/2).
prim(p174/2).
prim(p207/2).
prim(p232/2).
prim(p257/2).
prim(p263/2).
prim(p271/2).
prim(p299/2).
prim(p315/2).
prim(p325/2).
prim(p338/2).
prim(p349/2).
prim(p355/2).
prim(p365/2).
prim(p367/2).
prim(p369/2).
prim(p382/2).
prim(p413/2).
prim(p417/2).
prim(p436/2).
prim(p458/2).
prim(p474/2).
prim(p545/2).
prim(p553/2).
prim(p563/2).
prim(p569/2).
prim(p574/2).
prim(p6/2).
prim(p31/2).
prim(p56/2).
prim(p82/2).
prim(p135/2).
prim(p150/2).
prim(p180/2).
prim(p186/2).
prim(p203/2).
prim(p215/2).
prim(p231/2).
prim(p262/2).
prim(p350/2).
prim(p389/2).
prim(p395/2).
prim(p399/2).
prim(p462/2).
prim(p502/2).
prim(p539/2).
prim(p564/2).
prim(p592/2).
prim(p387/2).
prim(p431/2).
prim(p9/2).
prim(p10/2).
prim(p10/2).
prim(p19/2).
prim(p36/2).
prim(p50/2).
prim(p52/2).
prim(p53/2).
prim(p54/2).
prim(p58/2).
prim(p67/2).
prim(p84/2).
prim(p84/2).
prim(p88/2).
prim(p121/2).
prim(p146/2).
prim(p169/2).
prim(p176/2).
prim(p197/2).
prim(p198/2).
prim(p208/2).
prim(p239/2).
prim(p241/2).
prim(p241/2).
prim(p244/2).
prim(p250/2).
prim(p254/2).
prim(p267/2).
prim(p267/2).
prim(p297/2).
prim(p302/2).
prim(p307/2).
prim(p313/2).
prim(p313/2).
prim(p323/2).
prim(p336/2).
prim(p342/2).
prim(p347/2).
prim(p347/2).
prim(p357/2).
prim(p364/2).
prim(p375/2).
prim(p380/2).
prim(p401/2).
prim(p405/2).
prim(p407/2).
prim(p456/2).
prim(p518/2).
prim(p524/2).
prim(p544/2).
prim(p570/2).
prim(p594/2).
prim(p93/2).
prim(p102/2).
prim(p269/2).
prim(p15/2).
prim(p33/2).
prim(p43/2).
prim(p61/2).
prim(p65/2).
prim(p81/2).
prim(p87/2).
prim(p87/2).
prim(p94/2).
prim(p101/2).
prim(p134/2).
prim(p149/2).
prim(p151/2).
prim(p161/2).
prim(p161/2).
prim(p182/2).
prim(p184/2).
prim(p187/2).
prim(p196/2).
prim(p196/2).
prim(p221/2).
prim(p240/2).
prim(p276/2).
prim(p276/2).
prim(p280/2).
prim(p281/2).
prim(p289/2).
prim(p303/2).
prim(p308/2).
prim(p308/2).
prim(p356/2).
prim(p381/2).
prim(p443/2).
prim(p460/2).
prim(p461/2).
prim(p464/2).
prim(p469/2).
prim(p471/2).
prim(p492/2).
prim(p520/2).
prim(p528/2).
prim(p555/2).
prim(p556/2).
prim(p384/2).
prim(p522/2).
prim(p522/2).
prim(p253/2).
prim(p253/2).

metarule(precon,[P/2,Q/1,R/2],([P,A,B]:-[[Q,A],[R,A,B]])).
metarule(postcon,[P/2,Q/2,R/1],([P,A,B]:-[[Q,A,B],[R,B]])).
metarule(chain,[P/2,Q/2,R/2],([P,A,B]:-[[Q,A,C],[R,C,B]])).
metarule(tailrec,[P/2,Q/2],([P,A,B]:-[[Q,A,C],[P,C,B]])).
%% metarule(curry3,[P/2,Q/3,C/0],([P,A,B]:-[[Q,A,B,C]])).

  
a:-
    cpus(CPU_COUNT),
    set_prolog_flag(cpu_count,CPU_COUNT),
    games(Games),
    playgol(Games),
    b,
    halt.

b:-
    cpus(CPU_COUNT),
    set_prolog_flag(cpu_count,CPU_COUNT),
    %get_time(T),
    %stamp_date_time(T, date(DY,DM,DD,TH,TM,TS,_,_,_), 'UTC'),
    %format('% started solving build tasks at ~w ~w ~w ~w:~w:~w\n', [DD, DM, DY, TH, TM, TS]),
    max_build_depth(BuildDepth),
    playgol:update_depth(BuildDepth),
    max_build_time(BuildTime),
    retractall(max_time(_)),
    assert(max_time(BuildTime)),
    tasks(Tasks),
    learn_tasks(Tasks,Progs),
    length(Progs,N),
    format('% num solved ~w\n',[N]),
    %get_time(T2),
    %stamp_date_time(T2, date(DY2,DM2,DD2,TH2,TM2,TS2,_,_,_), 'UTC'),
    %format('% finished solving build tasks at ~w ~w ~w ~w:~w:~w\n', [DD2, DM2, DY2, TH2, TM2, TS2]),
    halt.

learn_tasks(Tasks,Progs):-
    concurrent_maplist(learn_aux,Tasks,Xs),
    findall(true,member(true,Xs),Progs).

learn_aux(T,true):-
    train_examples(T,Pos,Neg),
    max_time(MaxTime),
    get_time(TTT),
    stamp_date_time(TTT, date(DY,DM,DD,TH,TM,TS,_,_,_), 'UTC'),
    format('% started solving build task at ~w ~w ~w ~w:~w:~w\n', [DD, DM, DY, TH, TM, TS]),
    catch(call_with_time_limit(MaxTime,learn(Pos,Neg,Prog)),time_limit_exceeded,(writeln('%timeout'),false)),!,
    get_time(TTT2),
    stamp_date_time(TTT2, date(DY2,DM2,DD2,TH2,TM2,TS2,_,_,_), 'UTC'),
    format('% finished solving build tasks at ~w ~w ~w ~w:~w:~w\n', [DD2, DM2, DY2, TH2, TM2, TS2]),
    pprint(Prog).
learn_aux(_,false).

do_test:-
    tasks(Tasks),
    maplist(do_test,Tasks),
    halt.

do_test(Task):-
    test_examples(Task,Pos),
    (current_predicate(Task/2) ->
        (
            format('%solved,~w,~w\n',[Task,1]),
            forall(member(X,Pos),(call(X) -> format('~w,~w\n',[1,1]); format('~w,~w\n',[1,0])))
        );
        (
            format('%solved,~w,~w\n',[Task,0]),
            forall(member(_,Pos),format('~w,~w\n',[0,0]))
        )).

gen_e(Task,Input,Output,Out):-
    Out=..[Task,s(Input,Output),s(_,[])].

play_examples(Task,Pos,[]):-
    findall(X,(play_pos(Task,A,B),gen_e(Task,A,B,X)),Pos1),
    sort_examples(Pos1,Pos).

train_examples(Task,Pos,[]):-
    findall(X,(build_pos(Task,A,B),gen_e(Task,A,B,X)),Pos1),
    sort_examples(Pos1,Pos).

test_examples(Task,Pos):-
    findall(X,(test_pos(Task,A,B),gen_e(Task,A,B,X)),Pos).

add_len(Atom,Len-Atom):-
    Atom=..[_Task,s(Input,_Output),s(_,[])],
    length(Input,Len).
remove_len(_-Atom,Atom).

sort_examples(L1,L2):-
  maplist(add_len,L1,L3),
  keysort(L3,L4),
  maplist(remove_len,L4,L2).

