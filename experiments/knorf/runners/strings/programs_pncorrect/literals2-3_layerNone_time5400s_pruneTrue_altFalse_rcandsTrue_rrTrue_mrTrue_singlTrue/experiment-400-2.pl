
:-['../playgol'].
:-['string-bk'].
:-['../metagol'].

:-['./programs_pncorrect/literals2-3_layerNone_time5400s_pruneTrue_altFalse_rcandsTrue_rrTrue_mrTrue_singlTrue/refactored_primitives-400-2.pl'].



:- use_module(library(time)).

play_time_interval(2).
max_build_time(60).
max_play_depth(4).
max_build_depth(5).
cpus(4).

metagol:functional.
%% metagol:max_clauses(10).

func_test([P,s(In,Out1),s(_,[])],PS,G):-
  \+ (metagol :prove_deduce([[P,s(In,Out2),s(_,[])]],PS,G),Out1\= Out2).



%% tell metagol to use the BK
prim(is_empty/1).
prim(not_empty/1). % maybe?

prim(is_space/1).
prim(not_space/1). % maybe?

prim(is_uppercase/1).
prim(is_lowercase/1).

prim(is_letter/1).
prim(not_letter/1).

prim(is_number/1).
prim(not_number/1).

prim(copy1/2).
prim(skip1/2).
prim(mk_uppercase/2).
prim(mk_lowercase/2).
%% prim(write1/3).

prim(latent553_2/2).
prim(latent425_2/2).
prim(latent33_3/2).
prim(latent786_3/2).
prim(latent151_2/2).
prim(latent919_3/2).
prim(latent209_2/2).
prim(latent139_2/2).
prim(latent523_2/2).
prim(latent200_2/2).
prim(latent927_3/2).
prim(latent84/2).
prim(latent646_2/2).
prim(latent165_2/2).
prim(latent1/2).
prim(latent136_2/2).
prim(latent777_2/2).
prim(latent35_3/2).
prim(latent603_2/2).
prim(latent50_3/2).
prim(latent906_3/2).
prim(latent42_3/2).
prim(latent870_3/2).
prim(latent109_2/2).
prim(latent890_3/2).
prim(latent41_3/2).
prim(latent7_2/2).
prim(latent24_3/2).
prim(latent40_3/2).
prim(latent1421_3/2).
prim(latent728_2/2).
prim(latent431_2/2).
prim(latent205_2/2).
prim(latent133_2/2).
prim(latent51_3/2).
prim(latent395_2/2).
prim(latent63_3/2).
prim(latent201_2/2).
prim(latent8_2/2).
prim(latent30_3/2).
prim(latent493_2/2).
prim(latent912_3/2).
prim(latent1156_2/2).
prim(latent36_3/2).
prim(latent1154_2/2).
prim(latent196_2/2).
prim(latent108_2/2).
prim(latent145_2/2).
prim(latent1052_3/2).
prim(latent155_2/2).
prim(latent1294_3/2).
prim(latent67_3/2).
prim(latent29_3/2).
prim(latent776_3/2).
prim(latent1390_2/2).
prim(latent27_3/2).
prim(latent86_2/2).
prim(latent799_3/2).
prim(latent356_3/2).
prim(latent985_3/2).
prim(latent16_2/2).
prim(latent14_2/2).
prim(latent32_2/2).
prim(latent10_2/2).
prim(latent884_3/2).
prim(latent5_2/2).
prim(latent15_2/2).
prim(latent78_3/2).
prim(latent470_2/2).
prim(latent282_2/2).
prim(latent156_2/2).
prim(latent2/2).
prim(latent65_3/2).
prim(latent230_2/2).
prim(latent148_2/2).
prim(latent887_3/2).
prim(latent3/2).
prim(latent1426_3/2).
prim(latent863_3/2).
prim(latent901_3/2).
prim(latent217_2/2).
prim(latent56_3/2).
prim(latent835_3/2).
prim(latent240_2/2).
prim(latent289_2/2).
prim(latent175_2/2).
prim(latent256_2/2).
prim(latent1450_3/2).
prim(latent61_3/2).
prim(latent59_3/2).
prim(latent210_2/2).
prim(latent66_3/2).
prim(latent291_2/2).
prim(latent11_2/2).
prim(latent1279_2/2).
prim(latent357_2/2).
prim(latent522_2/2).
prim(latent550_2/2).
prim(latent49_3/2).
prim(latent1330_3/2).
prim(latent191_2/2).
prim(latent19_3/2).
prim(latent720_2/2).
prim(latent39_3/2).
prim(latent21_2/2).
prim(latent709_2/2).
prim(latent12_2/2).
prim(latent192_2/2).
prim(latent379_2/2).
prim(latent54_3/2).
prim(latent118_2/2).
prim(latent1126_3/2).
prim(latent917_3/2).
prim(latent198_2/2).
prim(latent185_2/2).
prim(latent31_2/2).
prim(latent317_2/2).
prim(latent4_2/2).
prim(latent20_3/2).
prim(latent1259_3/2).
prim(latent327_2/2).
prim(latent13_2/2).
prim(latent716_2/2).
prim(latent158_2/2).
prim(latent85_2/2).
prim(latent121_2/2).
prim(latent144_2/2).
prim(latent6/2).
prim(latent9_2/2).
prim(latent248_2/2).
prim(latent627_2/2).
prim(latent970_2/2).
prim(latent820_3/2).
prim(latent844_3/2).
prim(latent454_2/2).
prim(latent514_3/2).
prim(latent807_3/2).
prim(latent87_2/2).
prim(latent856_3/2).
prim(latent939_2/2).
prim(latent507_2/2).
prim(latent439_2/2).
prim(latent26_3/2).
prim(latent891_2/2).
prim(latent43_3/2).
prim(latent940_3/2).
prim(latent17_2/2).
prim(p7/2).
prim(p8/2).
prim(p12/2).
prim(p13/2).
prim(p16/2).
prim(p21/2).
prim(p42/2).
prim(p51/2).
prim(p60/2).
prim(p78/2).
prim(p125/2).
prim(p127/2).
prim(p194/2).
prim(p206/2).
prim(p285/2).
prim(p286/2).
prim(p2/2).
prim(p17/2).
prim(p64/2).
prim(p83/2).
prim(p90/2).
prim(p90/2).
prim(p94/2).
prim(p120/2).
prim(p120/2).
prim(p122/2).
prim(p126/2).
prim(p126/2).
prim(p148/2).
prim(p148/2).
prim(p150/2).
prim(p156/2).
prim(p169/2).
prim(p202/2).
prim(p205/2).
prim(p220/2).
prim(p244/2).
prim(p261/2).
prim(p270/2).
prim(p304/2).
prim(p352/2).
prim(p359/2).
prim(p11/2).
prim(p182/2).
prim(p186/2).
prim(p344/2).
prim(p10/2).
prim(p20/2).
prim(p41/2).
prim(p63/2).
prim(p71/2).
prim(p79/2).
prim(p84/2).
prim(p95/2).
prim(p99/2).
prim(p101/2).
prim(p161/2).
prim(p168/2).
prim(p170/2).
prim(p211/2).
prim(p213/2).
prim(p221/2).
prim(p228/2).
prim(p234/2).
prim(p250/2).
prim(p254/2).
prim(p283/2).
prim(p329/2).
prim(p339/2).
prim(p368/2).
prim(p378/2).
prim(p380/2).
prim(p14/2).
prim(p28/2).
prim(p32/2).
prim(p55/2).
prim(p65/2).
prim(p69/2).
prim(p100/2).
prim(p103/2).
prim(p109/2).
prim(p118/2).
prim(p137/2).
prim(p139/2).
prim(p187/2).
prim(p201/2).
prim(p246/2).
prim(p302/2).
prim(p324/2).
prim(p342/2).
prim(p350/2).
prim(p351/2).
prim(p15/2).
prim(p22/2).
prim(p44/2).
prim(p47/2).
prim(p67/2).
prim(p67/2).
prim(p76/2).
prim(p77/2).
prim(p191/2).
prim(p299/2).
prim(p310/2).
prim(p355/2).
prim(p1/2).
prim(p9/2).
prim(p30/2).
prim(p35/2).
prim(p36/2).
prim(p54/2).
prim(p87/2).
prim(p144/2).
prim(p147/2).
prim(p171/2).
prim(p193/2).
prim(p193/2).
prim(p231/2).
prim(p280/2).
prim(p303/2).
prim(p393/2).
prim(p398/2).
prim(p399/2).
prim(p188/2).
prim(p4/2).
prim(p5/2).
prim(p29/2).
prim(p62/2).
prim(p75/2).
prim(p82/2).
prim(p97/2).
prim(p115/2).
prim(p116/2).
prim(p132/2).
prim(p138/2).
prim(p140/2).
prim(p142/2).
prim(p143/2).
prim(p162/2).
prim(p179/2).
prim(p208/2).
prim(p232/2).
prim(p243/2).
prim(p313/2).
prim(p313/2).
prim(p319/2).
prim(p328/2).
prim(p333/2).
prim(p337/2).
prim(p341/2).
prim(p366/2).
prim(p375/2).
prim(p376/2).
prim(p377/2).
prim(p388/2).
prim(p229/2).
prim(p248/2).
prim(p266/2).
prim(p326/2).
prim(p6/2).
prim(p26/2).
prim(p34/2).
prim(p46/2).
prim(p52/2).
prim(p56/2).
prim(p57/2).
prim(p72/2).
prim(p89/2).
prim(p102/2).
prim(p106/2).
prim(p112/2).
prim(p117/2).
prim(p178/2).
prim(p190/2).
prim(p210/2).
prim(p214/2).
prim(p215/2).
prim(p227/2).
prim(p241/2).
prim(p245/2).
prim(p256/2).
prim(p290/2).
prim(p294/2).
prim(p298/2).
prim(p323/2).
prim(p354/2).
prim(p357/2).
prim(p358/2).
prim(p361/2).
prim(p372/2).
prim(p374/2).
prim(p386/2).
prim(p391/2).
prim(p316/2).
prim(p18/2).
prim(p19/2).
prim(p25/2).
prim(p45/2).
prim(p104/2).
prim(p105/2).
prim(p224/2).
prim(p236/2).
prim(p85/2).
prim(p275/2).
prim(p392/2).
prim(p23/2).
prim(p39/2).
prim(p43/2).
prim(p48/2).
prim(p50/2).
prim(p70/2).
prim(p73/2).
prim(p88/2).
prim(p96/2).
prim(p110/2).
prim(p110/2).
prim(p129/2).
prim(p131/2).
prim(p134/2).
prim(p135/2).
prim(p149/2).
prim(p152/2).
prim(p155/2).
prim(p157/2).
prim(p174/2).
prim(p216/2).
prim(p218/2).
prim(p223/2).
prim(p226/2).
prim(p235/2).
prim(p238/2).
prim(p272/2).
prim(p277/2).
prim(p301/2).
prim(p306/2).
prim(p311/2).
prim(p311/2).
prim(p315/2).
prim(p346/2).
prim(p348/2).
prim(p364/2).
prim(p370/2).
prim(p390/2).
prim(p31/2).
prim(p217/2).
prim(p164/2).
prim(p164/2).
prim(p189/2).
prim(p189/2).

metarule(precon,[P/2,Q/1,R/2],([P,A,B]:-[[Q,A],[R,A,B]])).
metarule(postcon,[P/2,Q/2,R/1],([P,A,B]:-[[Q,A,B],[R,B]])).
metarule(chain,[P/2,Q/2,R/2],([P,A,B]:-[[Q,A,C],[R,C,B]])).
metarule(tailrec,[P/2,Q/2],([P,A,B]:-[[Q,A,C],[P,C,B]])).
%% metarule(curry3,[P/2,Q/3,C/0],([P,A,B]:-[[Q,A,B,C]])).

  
a:-
    cpus(CPU_COUNT),
    set_prolog_flag(cpu_count,CPU_COUNT),
    games(Games),
    playgol(Games),
    b,
    halt.

b:-
    cpus(CPU_COUNT),
    set_prolog_flag(cpu_count,CPU_COUNT),
    %get_time(T),
    %stamp_date_time(T, date(DY,DM,DD,TH,TM,TS,_,_,_), 'UTC'),
    %format('% started solving build tasks at ~w ~w ~w ~w:~w:~w\n', [DD, DM, DY, TH, TM, TS]),
    max_build_depth(BuildDepth),
    playgol:update_depth(BuildDepth),
    max_build_time(BuildTime),
    retractall(max_time(_)),
    assert(max_time(BuildTime)),
    tasks(Tasks),
    learn_tasks(Tasks,Progs),
    length(Progs,N),
    format('% num solved ~w\n',[N]),
    %get_time(T2),
    %stamp_date_time(T2, date(DY2,DM2,DD2,TH2,TM2,TS2,_,_,_), 'UTC'),
    %format('% finished solving build tasks at ~w ~w ~w ~w:~w:~w\n', [DD2, DM2, DY2, TH2, TM2, TS2]),
    halt.

learn_tasks(Tasks,Progs):-
    concurrent_maplist(learn_aux,Tasks,Xs),
    findall(true,member(true,Xs),Progs).

learn_aux(T,true):-
    train_examples(T,Pos,Neg),
    max_time(MaxTime),
    get_time(TTT),
    stamp_date_time(TTT, date(DY,DM,DD,TH,TM,TS,_,_,_), 'UTC'),
    format('% started solving build task at ~w ~w ~w ~w:~w:~w\n', [DD, DM, DY, TH, TM, TS]),
    catch(call_with_time_limit(MaxTime,learn(Pos,Neg,Prog)),time_limit_exceeded,(writeln('%timeout'),false)),!,
    get_time(TTT2),
    stamp_date_time(TTT2, date(DY2,DM2,DD2,TH2,TM2,TS2,_,_,_), 'UTC'),
    format('% finished solving build tasks at ~w ~w ~w ~w:~w:~w\n', [DD2, DM2, DY2, TH2, TM2, TS2]),
    pprint(Prog).
learn_aux(_,false).

do_test:-
    tasks(Tasks),
    maplist(do_test,Tasks),
    halt.

do_test(Task):-
    test_examples(Task,Pos),
    (current_predicate(Task/2) ->
        (
            format('%solved,~w,~w\n',[Task,1]),
            forall(member(X,Pos),(call(X) -> format('~w,~w\n',[1,1]); format('~w,~w\n',[1,0])))
        );
        (
            format('%solved,~w,~w\n',[Task,0]),
            forall(member(_,Pos),format('~w,~w\n',[0,0]))
        )).

gen_e(Task,Input,Output,Out):-
    Out=..[Task,s(Input,Output),s(_,[])].

play_examples(Task,Pos,[]):-
    findall(X,(play_pos(Task,A,B),gen_e(Task,A,B,X)),Pos1),
    sort_examples(Pos1,Pos).

train_examples(Task,Pos,[]):-
    findall(X,(build_pos(Task,A,B),gen_e(Task,A,B,X)),Pos1),
    sort_examples(Pos1,Pos).

test_examples(Task,Pos):-
    findall(X,(test_pos(Task,A,B),gen_e(Task,A,B,X)),Pos).

add_len(Atom,Len-Atom):-
    Atom=..[_Task,s(Input,_Output),s(_,[])],
    length(Input,Len).
remove_len(_-Atom,Atom).

sort_examples(L1,L2):-
  maplist(add_len,L1,L3),
  keysort(L3,L4),
  maplist(remove_len,L4,L2).

