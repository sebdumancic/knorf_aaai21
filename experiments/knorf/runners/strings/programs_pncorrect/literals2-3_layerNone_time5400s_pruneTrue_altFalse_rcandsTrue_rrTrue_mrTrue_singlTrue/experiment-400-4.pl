
:-['../playgol'].
:-['string-bk'].
:-['../metagol'].

:-['./programs_pncorrect/literals2-3_layerNone_time5400s_pruneTrue_altFalse_rcandsTrue_rrTrue_mrTrue_singlTrue/refactored_primitives-400-4.pl'].



:- use_module(library(time)).

play_time_interval(2).
max_build_time(60).
max_play_depth(4).
max_build_depth(5).
cpus(4).

metagol:functional.
%% metagol:max_clauses(10).

func_test([P,s(In,Out1),s(_,[])],PS,G):-
  \+ (metagol :prove_deduce([[P,s(In,Out2),s(_,[])]],PS,G),Out1\= Out2).



%% tell metagol to use the BK
prim(is_empty/1).
prim(not_empty/1). % maybe?

prim(is_space/1).
prim(not_space/1). % maybe?

prim(is_uppercase/1).
prim(is_lowercase/1).

prim(is_letter/1).
prim(not_letter/1).

prim(is_number/1).
prim(not_number/1).

prim(copy1/2).
prim(skip1/2).
prim(mk_uppercase/2).
prim(mk_lowercase/2).
%% prim(write1/3).

prim(latent31_2/2).
prim(latent1131_3/2).
prim(latent11_2/2).
prim(latent166_2/2).
prim(latent69_3/2).
prim(latent821_2/2).
prim(latent130_2/2).
prim(latent76_3/2).
prim(latent2/2).
prim(latent157_2/2).
prim(latent249_2/2).
prim(latent99_2/2).
prim(latent173_2/2).
prim(latent4_2/2).
prim(latent401_3/2).
prim(latent195_2/2).
prim(latent12_2/2).
prim(latent84_3/2).
prim(latent711_3/2).
prim(latent1292_2/2).
prim(latent33_3/2).
prim(latent93_2/2).
prim(latent1158_2/2).
prim(latent1086_2/2).
prim(latent24_2/2).
prim(latent315_2/2).
prim(latent82_2/2).
prim(latent58_3/2).
prim(latent1399_3/2).
prim(latent465_2/2).
prim(latent570_3/2).
prim(latent15_2/2).
prim(latent53_3/2).
prim(latent176_2/2).
prim(latent1188_2/2).
prim(latent645_2/2).
prim(latent28_3/2).
prim(latent1392_3/2).
prim(latent257_2/2).
prim(latent52_3/2).
prim(latent719_2/2).
prim(latent650_3/2).
prim(latent667_3/2).
prim(latent1156_2/2).
prim(latent634_3/2).
prim(latent509_3/2).
prim(latent693_3/2).
prim(latent43_3/2).
prim(latent1/2).
prim(latent86_2/2).
prim(latent183_2/2).
prim(latent32_3/2).
prim(latent1271_2/2).
prim(latent308_2/2).
prim(latent761_3/2).
prim(latent5/2).
prim(latent247_2/2).
prim(latent13_2/2).
prim(latent57_3/2).
prim(latent225_2/2).
prim(latent161_2/2).
prim(latent95_2/2).
prim(latent26_3/2).
prim(latent343_2/2).
prim(latent444_3/2).
prim(latent7_2/2).
prim(latent51_3/2).
prim(latent19_3/2).
prim(latent255_2/2).
prim(latent140_3/2).
prim(latent25_3/2).
prim(latent187_2/2).
prim(latent109_3/2).
prim(latent46_3/2).
prim(latent37_2/2).
prim(latent293_2/2).
prim(latent118_2/2).
prim(latent724_2/2).
prim(latent305_2/2).
prim(latent357_2/2).
prim(latent164_2/2).
prim(latent90_2/2).
prim(latent147_2/2).
prim(latent677_3/2).
prim(latent14_2/2).
prim(latent788_2/2).
prim(latent170_2/2).
prim(latent218_3/2).
prim(latent199_2/2).
prim(latent10_2/2).
prim(latent3_2/2).
prim(latent54_3/2).
prim(latent915_2/2).
prim(latent48_3/2).
prim(latent647_3/2).
prim(latent832_2/2).
prim(latent39_3/2).
prim(latent9_2/2).
prim(latent149_2/2).
prim(latent22_3/2).
prim(latent237_2/2).
prim(latent624_3/2).
prim(latent1004_2/2).
prim(latent36_2/2).
prim(latent45_3/2).
prim(latent8_2/2).
prim(latent908_3/2).
prim(latent167_2/2).
prim(latent589_3/2).
prim(latent486_2/2).
prim(latent172_2/2).
prim(latent330_2/2).
prim(latent106_2/2).
prim(latent562_3/2).
prim(latent935_2/2).
prim(latent428_3/2).
prim(latent55_3/2).
prim(latent1065_2/2).
prim(latent511_2/2).
prim(latent41_3/2).
prim(latent145_2/2).
prim(latent235_2/2).
prim(latent495_2/2).
prim(latent1083_3/2).
prim(latent473_3/2).
prim(latent49_3/2).
prim(latent70_3/2).
prim(latent267_2/2).
prim(latent156_2/2).
prim(latent789_2/2).
prim(latent44_3/2).
prim(latent104_2/2).
prim(latent144_2/2).
prim(latent680_3/2).
prim(latent555_3/2).
prim(latent23_3/2).
prim(latent29_3/2).
prim(latent94_2/2).
prim(latent56_3/2).
prim(latent894_2/2).
prim(latent420_2/2).
prim(latent178_2/2).
prim(latent6/2).
prim(latent159_2/2).
prim(p5/2).
prim(p6/2).
prim(p7/2).
prim(p16/2).
prim(p17/2).
prim(p18/2).
prim(p19/2).
prim(p27/2).
prim(p39/2).
prim(p106/2).
prim(p132/2).
prim(p140/2).
prim(p183/2).
prim(p352/2).
prim(p4/2).
prim(p11/2).
prim(p21/2).
prim(p34/2).
prim(p36/2).
prim(p49/2).
prim(p82/2).
prim(p87/2).
prim(p93/2).
prim(p102/2).
prim(p116/2).
prim(p119/2).
prim(p189/2).
prim(p195/2).
prim(p221/2).
prim(p252/2).
prim(p263/2).
prim(p293/2).
prim(p301/2).
prim(p314/2).
prim(p326/2).
prim(p336/2).
prim(p359/2).
prim(p370/2).
prim(p373/2).
prim(p376/2).
prim(p380/2).
prim(p387/2).
prim(p10/2).
prim(p26/2).
prim(p31/2).
prim(p47/2).
prim(p91/2).
prim(p121/2).
prim(p125/2).
prim(p126/2).
prim(p170/2).
prim(p184/2).
prim(p186/2).
prim(p190/2).
prim(p196/2).
prim(p210/2).
prim(p237/2).
prim(p248/2).
prim(p298/2).
prim(p321/2).
prim(p343/2).
prim(p356/2).
prim(p360/2).
prim(p391/2).
prim(p15/2).
prim(p23/2).
prim(p60/2).
prim(p60/2).
prim(p71/2).
prim(p77/2).
prim(p77/2).
prim(p131/2).
prim(p147/2).
prim(p147/2).
prim(p149/2).
prim(p164/2).
prim(p213/2).
prim(p236/2).
prim(p236/2).
prim(p262/2).
prim(p312/2).
prim(p323/2).
prim(p398/2).
prim(p3/2).
prim(p58/2).
prim(p65/2).
prim(p73/2).
prim(p74/2).
prim(p83/2).
prim(p90/2).
prim(p103/2).
prim(p124/2).
prim(p133/2).
prim(p133/2).
prim(p142/2).
prim(p160/2).
prim(p172/2).
prim(p205/2).
prim(p205/2).
prim(p217/2).
prim(p234/2).
prim(p261/2).
prim(p268/2).
prim(p291/2).
prim(p291/2).
prim(p342/2).
prim(p361/2).
prim(p361/2).
prim(p389/2).
prim(p231/2).
prim(p22/2).
prim(p42/2).
prim(p45/2).
prim(p52/2).
prim(p52/2).
prim(p66/2).
prim(p66/2).
prim(p69/2).
prim(p78/2).
prim(p96/2).
prim(p130/2).
prim(p154/2).
prim(p157/2).
prim(p169/2).
prim(p176/2).
prim(p180/2).
prim(p201/2).
prim(p223/2).
prim(p245/2).
prim(p332/2).
prim(p339/2).
prim(p393/2).
prim(p150/2).
prim(p222/2).
prim(p302/2).
prim(p302/2).
prim(p346/2).
prim(p145/2).
prim(p28/2).
prim(p35/2).
prim(p38/2).
prim(p48/2).
prim(p48/2).
prim(p50/2).
prim(p55/2).
prim(p57/2).
prim(p68/2).
prim(p72/2).
prim(p112/2).
prim(p187/2).
prim(p193/2).
prim(p197/2).
prim(p215/2).
prim(p300/2).
prim(p318/2).
prim(p333/2).
prim(p353/2).
prim(p353/2).
prim(p354/2).
prim(p374/2).
prim(p378/2).
prim(p384/2).
prim(p37/2).
prim(p114/2).
prim(p114/2).
prim(p277/2).
prim(p1/2).
prim(p2/2).
prim(p8/2).
prim(p61/2).
prim(p62/2).
prim(p63/2).
prim(p92/2).
prim(p97/2).
prim(p97/2).
prim(p107/2).
prim(p127/2).
prim(p127/2).
prim(p134/2).
prim(p134/2).
prim(p163/2).
prim(p163/2).
prim(p166/2).
prim(p166/2).
prim(p174/2).
prim(p177/2).
prim(p243/2).
prim(p279/2).
prim(p306/2).
prim(p313/2).
prim(p329/2).
prim(p331/2).
prim(p344/2).
prim(p345/2).
prim(p349/2).
prim(p350/2).
prim(p400/2).
prim(p13/2).
prim(p40/2).
prim(p51/2).
prim(p70/2).
prim(p94/2).
prim(p128/2).
prim(p148/2).
prim(p152/2).
prim(p179/2).
prim(p185/2).
prim(p185/2).
prim(p211/2).
prim(p212/2).
prim(p229/2).
prim(p229/2).
prim(p230/2).
prim(p230/2).
prim(p259/2).
prim(p280/2).
prim(p284/2).
prim(p292/2).
prim(p296/2).
prim(p304/2).
prim(p309/2).
prim(p324/2).
prim(p330/2).
prim(p379/2).
prim(p392/2).
prim(p41/2).
prim(p64/2).
prim(p64/2).
prim(p165/2).
prim(p369/2).
prim(p54/2).
prim(p59/2).
prim(p79/2).
prim(p81/2).
prim(p85/2).
prim(p139/2).
prim(p155/2).
prim(p200/2).
prim(p204/2).
prim(p207/2).
prim(p251/2).
prim(p269/2).
prim(p271/2).
prim(p295/2).
prim(p308/2).
prim(p320/2).
prim(p390/2).
prim(p240/2).
prim(p250/2).
prim(p276/2).
prim(p287/2).
prim(p362/2).
prim(p362/2).
prim(p274/2).
prim(p274/2).
prim(p88/2).
prim(p88/2).
prim(p88/2).

metarule(precon,[P/2,Q/1,R/2],([P,A,B]:-[[Q,A],[R,A,B]])).
metarule(postcon,[P/2,Q/2,R/1],([P,A,B]:-[[Q,A,B],[R,B]])).
metarule(chain,[P/2,Q/2,R/2],([P,A,B]:-[[Q,A,C],[R,C,B]])).
metarule(tailrec,[P/2,Q/2],([P,A,B]:-[[Q,A,C],[P,C,B]])).
%% metarule(curry3,[P/2,Q/3,C/0],([P,A,B]:-[[Q,A,B,C]])).

  
a:-
    cpus(CPU_COUNT),
    set_prolog_flag(cpu_count,CPU_COUNT),
    games(Games),
    playgol(Games),
    b,
    halt.

b:-
    cpus(CPU_COUNT),
    set_prolog_flag(cpu_count,CPU_COUNT),
    %get_time(T),
    %stamp_date_time(T, date(DY,DM,DD,TH,TM,TS,_,_,_), 'UTC'),
    %format('% started solving build tasks at ~w ~w ~w ~w:~w:~w\n', [DD, DM, DY, TH, TM, TS]),
    max_build_depth(BuildDepth),
    playgol:update_depth(BuildDepth),
    max_build_time(BuildTime),
    retractall(max_time(_)),
    assert(max_time(BuildTime)),
    tasks(Tasks),
    learn_tasks(Tasks,Progs),
    length(Progs,N),
    format('% num solved ~w\n',[N]),
    %get_time(T2),
    %stamp_date_time(T2, date(DY2,DM2,DD2,TH2,TM2,TS2,_,_,_), 'UTC'),
    %format('% finished solving build tasks at ~w ~w ~w ~w:~w:~w\n', [DD2, DM2, DY2, TH2, TM2, TS2]),
    halt.

learn_tasks(Tasks,Progs):-
    concurrent_maplist(learn_aux,Tasks,Xs),
    findall(true,member(true,Xs),Progs).

learn_aux(T,true):-
    train_examples(T,Pos,Neg),
    max_time(MaxTime),
    get_time(TTT),
    stamp_date_time(TTT, date(DY,DM,DD,TH,TM,TS,_,_,_), 'UTC'),
    format('% started solving build task at ~w ~w ~w ~w:~w:~w\n', [DD, DM, DY, TH, TM, TS]),
    catch(call_with_time_limit(MaxTime,learn(Pos,Neg,Prog)),time_limit_exceeded,(writeln('%timeout'),false)),!,
    get_time(TTT2),
    stamp_date_time(TTT2, date(DY2,DM2,DD2,TH2,TM2,TS2,_,_,_), 'UTC'),
    format('% finished solving build tasks at ~w ~w ~w ~w:~w:~w\n', [DD2, DM2, DY2, TH2, TM2, TS2]),
    pprint(Prog).
learn_aux(_,false).

do_test:-
    tasks(Tasks),
    maplist(do_test,Tasks),
    halt.

do_test(Task):-
    test_examples(Task,Pos),
    (current_predicate(Task/2) ->
        (
            format('%solved,~w,~w\n',[Task,1]),
            forall(member(X,Pos),(call(X) -> format('~w,~w\n',[1,1]); format('~w,~w\n',[1,0])))
        );
        (
            format('%solved,~w,~w\n',[Task,0]),
            forall(member(_,Pos),format('~w,~w\n',[0,0]))
        )).

gen_e(Task,Input,Output,Out):-
    Out=..[Task,s(Input,Output),s(_,[])].

play_examples(Task,Pos,[]):-
    findall(X,(play_pos(Task,A,B),gen_e(Task,A,B,X)),Pos1),
    sort_examples(Pos1,Pos).

train_examples(Task,Pos,[]):-
    findall(X,(build_pos(Task,A,B),gen_e(Task,A,B,X)),Pos1),
    sort_examples(Pos1,Pos).

test_examples(Task,Pos):-
    findall(X,(test_pos(Task,A,B),gen_e(Task,A,B,X)),Pos).

add_len(Atom,Len-Atom):-
    Atom=..[_Task,s(Input,_Output),s(_,[])],
    length(Input,Len).
remove_len(_-Atom,Atom).

sort_examples(L1,L2):-
  maplist(add_len,L1,L3),
  keysort(L3,L4),
  maplist(remove_len,L4,L2).

