
:-['../playgol'].
:-['string-bk'].
:-['../metagol'].

:-['./programs_pncorrect/literals2-3_layerNone_time5400s_pruneTrue_altFalse_rcandsTrue_rrTrue_mrTrue_singlTrue/refactored_primitives-600-7.pl'].



:- use_module(library(time)).

play_time_interval(2).
max_build_time(60).
max_play_depth(4).
max_build_depth(5).
cpus(4).

metagol:functional.
%% metagol:max_clauses(10).

func_test([P,s(In,Out1),s(_,[])],PS,G):-
  \+ (metagol :prove_deduce([[P,s(In,Out2),s(_,[])]],PS,G),Out1\= Out2).



%% tell metagol to use the BK
prim(is_empty/1).
prim(not_empty/1). % maybe?

prim(is_space/1).
prim(not_space/1). % maybe?

prim(is_uppercase/1).
prim(is_lowercase/1).

prim(is_letter/1).
prim(not_letter/1).

prim(is_number/1).
prim(not_number/1).

prim(copy1/2).
prim(skip1/2).
prim(mk_uppercase/2).
prim(mk_lowercase/2).
%% prim(write1/3).

prim(latent28_3/2).
prim(latent43_3/2).
prim(latent254_2/2).
prim(latent62_3/2).
prim(latent1280_3/2).
prim(latent248_2/2).
prim(latent1307_3/2).
prim(latent798_2/2).
prim(latent1466_2/2).
prim(latent1467_3/2).
prim(latent136_2/2).
prim(latent562_2/2).
prim(latent1203_3/2).
prim(latent628_2/2).
prim(latent1360_3/2).
prim(latent15_2/2).
prim(latent25_3/2).
prim(latent107_2/2).
prim(latent703_2/2).
prim(latent1717_2/2).
prim(latent269_2/2).
prim(latent1300_3/2).
prim(latent339_2/2).
prim(latent1335_3/2).
prim(latent91_2/2).
prim(latent1487_2/2).
prim(latent125_2/2).
prim(latent1058_3/2).
prim(latent29_3/2).
prim(latent292_2/2).
prim(latent1144_3/2).
prim(latent1282_3/2).
prim(latent1218_3/2).
prim(latent1200_3/2).
prim(latent1340_3/2).
prim(latent923_2/2).
prim(latent1311_3/2).
prim(latent44_3/2).
prim(latent200_2/2).
prim(latent1258_3/2).
prim(latent1035_3/2).
prim(latent35_2/2).
prim(latent286_3/2).
prim(latent263_3/2).
prim(latent1386_3/2).
prim(latent323_2/2).
prim(latent23_3/2).
prim(latent1065_3/2).
prim(latent14_2/2).
prim(latent135_2/2).
prim(latent812_2/2).
prim(latent407_3/2).
prim(latent1392_3/2).
prim(latent237_2/2).
prim(latent1173_3/2).
prim(latent53_3/2).
prim(latent26_2/2).
prim(latent171_2/2).
prim(latent763_2/2).
prim(latent977_3/2).
prim(latent226_2/2).
prim(latent474_2/2).
prim(latent50_2/2).
prim(latent594_3/2).
prim(latent360_2/2).
prim(latent42_3/2).
prim(latent118_2/2).
prim(latent1963_3/2).
prim(latent416_3/2).
prim(latent93_2/2).
prim(latent759_3/2).
prim(latent346_2/2).
prim(latent1169_3/2).
prim(latent2/2).
prim(latent1246_3/2).
prim(latent290_2/2).
prim(latent13/2).
prim(latent1553_2/2).
prim(latent11_2/2).
prim(latent6/2).
prim(latent115_2/2).
prim(latent343_2/2).
prim(latent615_2/2).
prim(latent40_3/2).
prim(latent467_2/2).
prim(latent1773_2/2).
prim(latent215_2/2).
prim(latent68_3/2).
prim(latent1910_2/2).
prim(latent69_3/2).
prim(latent268_2/2).
prim(latent1194_3/2).
prim(latent103_2/2).
prim(latent56_3/2).
prim(latent108_2/2).
prim(latent788_3/2).
prim(latent1316_3/2).
prim(latent382_3/2).
prim(latent161_2/2).
prim(latent100_2/2).
prim(latent8_2/2).
prim(latent927_3/2).
prim(latent303_2/2).
prim(latent12_2/2).
prim(latent1527_3/2).
prim(latent1110_2/2).
prim(latent577_3/2).
prim(latent99_2/2).
prim(latent288_2/2).
prim(latent20_3/2).
prim(latent160_2/2).
prim(latent1351_3/2).
prim(latent21_2/2).
prim(latent97_2/2).
prim(latent304_2/2).
prim(latent87/2).
prim(latent275_2/2).
prim(latent1322_3/2).
prim(latent243_2/2).
prim(latent422_3/2).
prim(latent3_2/2).
prim(latent1698_3/2).
prim(latent1269_3/2).
prim(latent18_3/2).
prim(latent96_2/2).
prim(latent680_2/2).
prim(latent824_2/2).
prim(latent648_3/2).
prim(latent1636_2/2).
prim(latent317_2/2).
prim(latent846_2/2).
prim(latent110_2/2).
prim(latent36_3/2).
prim(latent60_3/2).
prim(latent1365_3/2).
prim(latent1223_2/2).
prim(latent1291_3/2).
prim(latent1751_2/2).
prim(latent123_2/2).
prim(latent105_2/2).
prim(latent59_3/2).
prim(latent702_2/2).
prim(latent52_3/2).
prim(latent1295_3/2).
prim(latent330_2/2).
prim(latent30_2/2).
prim(latent89_2/2).
prim(latent1650_2/2).
prim(latent664_3/2).
prim(latent24_3/2).
prim(latent1250_3/2).
prim(latent1395_3/2).
prim(latent873_2/2).
prim(latent1331_3/2).
prim(latent1329_3/2).
prim(latent593_2/2).
prim(latent336_2/2).
prim(latent1380_3/2).
prim(latent539_3/2).
prim(latent1063_2/2).
prim(latent1304_3/2).
prim(latent314_2/2).
prim(latent81_3/2).
prim(latent561_2/2).
prim(latent934_3/2).
prim(latent1577_2/2).
prim(latent589_2/2).
prim(latent393_2/2).
prim(latent565_3/2).
prim(latent104_2/2).
prim(latent280_2/2).
prim(latent1356_3/2).
prim(latent1154_3/2).
prim(latent5_2/2).
prim(latent164_2/2).
prim(latent878_2/2).
prim(latent7/2).
prim(latent10_2/2).
prim(latent121_2/2).
prim(latent58_3/2).
prim(latent240_2/2).
prim(latent1847_2/2).
prim(latent256_2/2).
prim(latent1229_3/2).
prim(latent741_2/2).
prim(latent306_2/2).
prim(latent102_2/2).
prim(latent893_2/2).
prim(latent245_2/2).
prim(latent38_3/2).
prim(latent874_3/2).
prim(latent552_3/2).
prim(latent9_2/2).
prim(latent32_3/2).
prim(latent1_2/2).
prim(latent111_2/2).
prim(latent4_2/2).
prim(latent436_2/2).
prim(latent1376_3/2).
prim(latent34_3/2).
prim(latent257_2/2).
prim(latent57_3/2).
prim(latent92_2/2).
prim(latent1265_3/2).
prim(latent1241_3/2).
prim(latent17_3/2).
prim(latent241_3/2).
prim(latent146_2/2).
prim(latent33_3/2).
prim(latent182_2/2).
prim(p2/2).
prim(p9/2).
prim(p16/2).
prim(p21/2).
prim(p24/2).
prim(p27/2).
prim(p57/2).
prim(p121/2).
prim(p176/2).
prim(p178/2).
prim(p186/2).
prim(p192/2).
prim(p206/2).
prim(p581/2).
prim(p1/2).
prim(p19/2).
prim(p26/2).
prim(p43/2).
prim(p52/2).
prim(p79/2).
prim(p103/2).
prim(p106/2).
prim(p108/2).
prim(p128/2).
prim(p145/2).
prim(p157/2).
prim(p159/2).
prim(p168/2).
prim(p187/2).
prim(p193/2).
prim(p205/2).
prim(p208/2).
prim(p223/2).
prim(p228/2).
prim(p246/2).
prim(p249/2).
prim(p256/2).
prim(p274/2).
prim(p275/2).
prim(p284/2).
prim(p307/2).
prim(p311/2).
prim(p319/2).
prim(p320/2).
prim(p359/2).
prim(p368/2).
prim(p370/2).
prim(p372/2).
prim(p378/2).
prim(p388/2).
prim(p424/2).
prim(p464/2).
prim(p466/2).
prim(p503/2).
prim(p516/2).
prim(p531/2).
prim(p537/2).
prim(p588/2).
prim(p589/2).
prim(p3/2).
prim(p3/2).
prim(p7/2).
prim(p18/2).
prim(p63/2).
prim(p71/2).
prim(p77/2).
prim(p81/2).
prim(p81/2).
prim(p98/2).
prim(p126/2).
prim(p126/2).
prim(p140/2).
prim(p144/2).
prim(p160/2).
prim(p190/2).
prim(p204/2).
prim(p221/2).
prim(p221/2).
prim(p225/2).
prim(p225/2).
prim(p288/2).
prim(p291/2).
prim(p298/2).
prim(p327/2).
prim(p336/2).
prim(p358/2).
prim(p361/2).
prim(p361/2).
prim(p364/2).
prim(p367/2).
prim(p377/2).
prim(p380/2).
prim(p380/2).
prim(p400/2).
prim(p419/2).
prim(p419/2).
prim(p434/2).
prim(p440/2).
prim(p440/2).
prim(p448/2).
prim(p475/2).
prim(p481/2).
prim(p488/2).
prim(p493/2).
prim(p500/2).
prim(p513/2).
prim(p536/2).
prim(p536/2).
prim(p540/2).
prim(p548/2).
prim(p554/2).
prim(p555/2).
prim(p555/2).
prim(p40/2).
prim(p218/2).
prim(p351/2).
prim(p362/2).
prim(p486/2).
prim(p596/2).
prim(p10/2).
prim(p36/2).
prim(p70/2).
prim(p74/2).
prim(p183/2).
prim(p185/2).
prim(p195/2).
prim(p195/2).
prim(p247/2).
prim(p250/2).
prim(p266/2).
prim(p266/2).
prim(p315/2).
prim(p318/2).
prim(p347/2).
prim(p401/2).
prim(p407/2).
prim(p483/2).
prim(p522/2).
prim(p522/2).
prim(p523/2).
prim(p523/2).
prim(p538/2).
prim(p569/2).
prim(p17/2).
prim(p37/2).
prim(p59/2).
prim(p69/2).
prim(p96/2).
prim(p104/2).
prim(p109/2).
prim(p109/2).
prim(p111/2).
prim(p118/2).
prim(p122/2).
prim(p174/2).
prim(p197/2).
prim(p222/2).
prim(p235/2).
prim(p236/2).
prim(p295/2).
prim(p384/2).
prim(p437/2).
prim(p460/2).
prim(p492/2).
prim(p501/2).
prim(p502/2).
prim(p517/2).
prim(p495/2).
prim(p11/2).
prim(p35/2).
prim(p55/2).
prim(p73/2).
prim(p78/2).
prim(p84/2).
prim(p94/2).
prim(p99/2).
prim(p110/2).
prim(p124/2).
prim(p129/2).
prim(p138/2).
prim(p154/2).
prim(p199/2).
prim(p203/2).
prim(p253/2).
prim(p309/2).
prim(p387/2).
prim(p392/2).
prim(p412/2).
prim(p422/2).
prim(p479/2).
prim(p533/2).
prim(p454/2).
prim(p498/2).
prim(p58/2).
prim(p60/2).
prim(p86/2).
prim(p107/2).
prim(p133/2).
prim(p148/2).
prim(p169/2).
prim(p170/2).
prim(p181/2).
prim(p201/2).
prim(p233/2).
prim(p254/2).
prim(p289/2).
prim(p290/2).
prim(p292/2).
prim(p293/2).
prim(p303/2).
prim(p305/2).
prim(p323/2).
prim(p381/2).
prim(p403/2).
prim(p411/2).
prim(p427/2).
prim(p433/2).
prim(p445/2).
prim(p489/2).
prim(p543/2).
prim(p545/2).
prim(p556/2).
prim(p591/2).
prim(p597/2).
prim(p259/2).
prim(p553/2).
prim(p4/2).
prim(p6/2).
prim(p12/2).
prim(p68/2).
prim(p101/2).
prim(p165/2).
prim(p180/2).
prim(p191/2).
prim(p200/2).
prim(p210/2).
prim(p240/2).
prim(p261/2).
prim(p269/2).
prim(p286/2).
prim(p349/2).
prim(p382/2).
prim(p383/2).
prim(p385/2).
prim(p391/2).
prim(p413/2).
prim(p415/2).
prim(p443/2).
prim(p444/2).
prim(p485/2).
prim(p504/2).
prim(p509/2).
prim(p551/2).
prim(p576/2).
prim(p576/2).
prim(p586/2).
prim(p30/2).
prim(p80/2).
prim(p85/2).
prim(p348/2).
prim(p579/2).
prim(p579/2).
prim(p583/2).
prim(p585/2).
prim(p5/2).
prim(p8/2).
prim(p28/2).
prim(p41/2).
prim(p42/2).
prim(p91/2).
prim(p91/2).
prim(p93/2).
prim(p97/2).
prim(p119/2).
prim(p123/2).
prim(p130/2).
prim(p149/2).
prim(p163/2).
prim(p166/2).
prim(p167/2).
prim(p173/2).
prim(p175/2).
prim(p177/2).
prim(p189/2).
prim(p212/2).
prim(p215/2).
prim(p219/2).
prim(p226/2).
prim(p227/2).
prim(p239/2).
prim(p255/2).
prim(p272/2).
prim(p287/2).
prim(p301/2).
prim(p314/2).
prim(p329/2).
prim(p331/2).
prim(p342/2).
prim(p343/2).
prim(p345/2).
prim(p373/2).
prim(p376/2).
prim(p389/2).
prim(p397/2).
prim(p404/2).
prim(p431/2).
prim(p436/2).
prim(p438/2).
prim(p461/2).
prim(p467/2).
prim(p468/2).
prim(p497/2).
prim(p505/2).
prim(p510/2).
prim(p514/2).
prim(p524/2).
prim(p544/2).
prim(p552/2).
prim(p564/2).
prim(p566/2).
prim(p568/2).
prim(p573/2).
prim(p584/2).
prim(p34/2).
prim(p263/2).
prim(p14/2).
prim(p31/2).
prim(p82/2).
prim(p83/2).
prim(p89/2).
prim(p137/2).
prim(p172/2).
prim(p243/2).
prim(p258/2).
prim(p262/2).
prim(p271/2).
prim(p280/2).
prim(p283/2).
prim(p296/2).
prim(p317/2).
prim(p330/2).
prim(p393/2).
prim(p420/2).
prim(p462/2).
prim(p469/2).
prim(p471/2).
prim(p473/2).
prim(p484/2).
prim(p491/2).
prim(p529/2).
prim(p572/2).
prim(p116/2).
prim(p161/2).
prim(p399/2).
prim(p426/2).
prim(p426/2).
prim(p478/2).
prim(p478/2).

metarule(precon,[P/2,Q/1,R/2],([P,A,B]:-[[Q,A],[R,A,B]])).
metarule(postcon,[P/2,Q/2,R/1],([P,A,B]:-[[Q,A,B],[R,B]])).
metarule(chain,[P/2,Q/2,R/2],([P,A,B]:-[[Q,A,C],[R,C,B]])).
metarule(tailrec,[P/2,Q/2],([P,A,B]:-[[Q,A,C],[P,C,B]])).
%% metarule(curry3,[P/2,Q/3,C/0],([P,A,B]:-[[Q,A,B,C]])).

  
a:-
    cpus(CPU_COUNT),
    set_prolog_flag(cpu_count,CPU_COUNT),
    games(Games),
    playgol(Games),
    b,
    halt.

b:-
    cpus(CPU_COUNT),
    set_prolog_flag(cpu_count,CPU_COUNT),
    %get_time(T),
    %stamp_date_time(T, date(DY,DM,DD,TH,TM,TS,_,_,_), 'UTC'),
    %format('% started solving build tasks at ~w ~w ~w ~w:~w:~w\n', [DD, DM, DY, TH, TM, TS]),
    max_build_depth(BuildDepth),
    playgol:update_depth(BuildDepth),
    max_build_time(BuildTime),
    retractall(max_time(_)),
    assert(max_time(BuildTime)),
    tasks(Tasks),
    learn_tasks(Tasks,Progs),
    length(Progs,N),
    format('% num solved ~w\n',[N]),
    %get_time(T2),
    %stamp_date_time(T2, date(DY2,DM2,DD2,TH2,TM2,TS2,_,_,_), 'UTC'),
    %format('% finished solving build tasks at ~w ~w ~w ~w:~w:~w\n', [DD2, DM2, DY2, TH2, TM2, TS2]),
    halt.

learn_tasks(Tasks,Progs):-
    concurrent_maplist(learn_aux,Tasks,Xs),
    findall(true,member(true,Xs),Progs).

learn_aux(T,true):-
    train_examples(T,Pos,Neg),
    max_time(MaxTime),
    get_time(TTT),
    stamp_date_time(TTT, date(DY,DM,DD,TH,TM,TS,_,_,_), 'UTC'),
    format('% started solving build task at ~w ~w ~w ~w:~w:~w\n', [DD, DM, DY, TH, TM, TS]),
    catch(call_with_time_limit(MaxTime,learn(Pos,Neg,Prog)),time_limit_exceeded,(writeln('%timeout'),false)),!,
    get_time(TTT2),
    stamp_date_time(TTT2, date(DY2,DM2,DD2,TH2,TM2,TS2,_,_,_), 'UTC'),
    format('% finished solving build tasks at ~w ~w ~w ~w:~w:~w\n', [DD2, DM2, DY2, TH2, TM2, TS2]),
    pprint(Prog).
learn_aux(_,false).

do_test:-
    tasks(Tasks),
    maplist(do_test,Tasks),
    halt.

do_test(Task):-
    test_examples(Task,Pos),
    (current_predicate(Task/2) ->
        (
            format('%solved,~w,~w\n',[Task,1]),
            forall(member(X,Pos),(call(X) -> format('~w,~w\n',[1,1]); format('~w,~w\n',[1,0])))
        );
        (
            format('%solved,~w,~w\n',[Task,0]),
            forall(member(_,Pos),format('~w,~w\n',[0,0]))
        )).

gen_e(Task,Input,Output,Out):-
    Out=..[Task,s(Input,Output),s(_,[])].

play_examples(Task,Pos,[]):-
    findall(X,(play_pos(Task,A,B),gen_e(Task,A,B,X)),Pos1),
    sort_examples(Pos1,Pos).

train_examples(Task,Pos,[]):-
    findall(X,(build_pos(Task,A,B),gen_e(Task,A,B,X)),Pos1),
    sort_examples(Pos1,Pos).

test_examples(Task,Pos):-
    findall(X,(test_pos(Task,A,B),gen_e(Task,A,B,X)),Pos).

add_len(Atom,Len-Atom):-
    Atom=..[_Task,s(Input,_Output),s(_,[])],
    length(Input,Len).
remove_len(_-Atom,Atom).

sort_examples(L1,L2):-
  maplist(add_len,L1,L3),
  keysort(L3,L4),
  maplist(remove_len,L4,L2).

