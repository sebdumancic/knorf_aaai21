
:-['../playgol'].
:-['string-bk'].
:-['../metagol'].

:-['./programs_pncorrect/literals2-3_layerNone_time5400s_pruneTrue_altFalse_rcandsTrue_rrTrue_mrTrue_singlTrue/refactored_primitives-600-10.pl'].



:- use_module(library(time)).

play_time_interval(2).
max_build_time(60).
max_play_depth(4).
max_build_depth(5).
cpus(4).

metagol:functional.
%% metagol:max_clauses(10).

func_test([P,s(In,Out1),s(_,[])],PS,G):-
  \+ (metagol :prove_deduce([[P,s(In,Out2),s(_,[])]],PS,G),Out1\= Out2).



%% tell metagol to use the BK
prim(is_empty/1).
prim(not_empty/1). % maybe?

prim(is_space/1).
prim(not_space/1). % maybe?

prim(is_uppercase/1).
prim(is_lowercase/1).

prim(is_letter/1).
prim(not_letter/1).

prim(is_number/1).
prim(not_number/1).

prim(copy1/2).
prim(skip1/2).
prim(mk_uppercase/2).
prim(mk_lowercase/2).
%% prim(write1/3).

prim(latent6_2/2).
prim(latent1511_3/2).
prim(latent407_3/2).
prim(latent27_3/2).
prim(latent1521_3/2).
prim(latent1411_3/2).
prim(latent1420_3/2).
prim(latent271_2/2).
prim(latent1374_3/2).
prim(latent124_2/2).
prim(latent1881_2/2).
prim(latent1395_3/2).
prim(latent41_3/2).
prim(latent398_2/2).
prim(latent399_3/2).
prim(latent140_2/2).
prim(latent89_3/2).
prim(latent157_2/2).
prim(latent330_2/2).
prim(latent12_2/2).
prim(latent1564_2/2).
prim(latent839_3/2).
prim(latent486_2/2).
prim(latent142_2/2).
prim(latent127_2/2).
prim(latent1528_3/2).
prim(latent307_2/2).
prim(latent83_2/2).
prim(latent803_2/2).
prim(latent1042_2/2).
prim(latent1554_3/2).
prim(latent33_3/2).
prim(latent16_2/2).
prim(latent1384_3/2).
prim(latent1470_3/2).
prim(latent23_3/2).
prim(latent412_3/2).
prim(latent141_2/2).
prim(latent349_3/2).
prim(latent11_2/2).
prim(latent315_2/2).
prim(latent1353_3/2).
prim(latent106_2/2).
prim(latent553_3/2).
prim(latent336_2/2).
prim(latent288_2/2).
prim(latent278_2/2).
prim(latent25_3/2).
prim(latent290_2/2).
prim(latent1750_2/2).
prim(latent123_2/2).
prim(latent1578_2/2).
prim(latent397_2/2).
prim(latent21_3/2).
prim(latent17_3/2).
prim(latent579_2/2).
prim(latent503_3/2).
prim(latent39_3/2).
prim(latent131_2/2).
prim(latent102_2/2).
prim(latent31_3/2).
prim(latent158_2/2).
prim(latent1444_3/2).
prim(latent1641_2/2).
prim(latent940_2/2).
prim(latent1158_2/2).
prim(latent605_3/2).
prim(latent1123_2/2).
prim(latent30_3/2).
prim(latent905_2/2).
prim(latent1720_2/2).
prim(latent280_2/2).
prim(latent1509_3/2).
prim(latent134_2/2).
prim(latent409_2/2).
prim(latent295_3/2).
prim(latent8/2).
prim(latent1482_3/2).
prim(latent1339_3/2).
prim(latent229_2/2).
prim(latent1429_3/2).
prim(latent644_2/2).
prim(latent180_2/2).
prim(latent126_2/2).
prim(latent522_2/2).
prim(latent1773_2/2).
prim(latent9_2/2).
prim(latent34_3/2).
prim(latent2_2/2).
prim(latent167_2/2).
prim(latent108_2/2).
prim(latent135_2/2).
prim(latent466_3/2).
prim(latent242_2/2).
prim(latent151_2/2).
prim(latent507_2/2).
prim(latent1689_2/2).
prim(latent101_2/2).
prim(latent1431_3/2).
prim(latent104/2).
prim(latent1985_2/2).
prim(latent86_2/2).
prim(latent1461_3/2).
prim(latent1076_2/2).
prim(latent94/2).
prim(latent35_2/2).
prim(latent1500_3/2).
prim(latent1409_3/2).
prim(latent973_2/2).
prim(latent10_2/2).
prim(latent498_2/2).
prim(latent403_2/2).
prim(latent1486_3/2).
prim(latent672_3/2).
prim(latent5/2).
prim(latent1421_3/2).
prim(latent20_2/2).
prim(latent42_3/2).
prim(latent103_2/2).
prim(latent93_2/2).
prim(latent162_2/2).
prim(latent133_2/2).
prim(latent257_2/2).
prim(latent1065_2/2).
prim(latent1840_2/2).
prim(latent308_2/2).
prim(latent317_2/2).
prim(latent406_2/2).
prim(latent284_3/2).
prim(latent1438_3/2).
prim(latent866_3/2).
prim(latent114_2/2).
prim(latent723_3/2).
prim(latent367_2/2).
prim(latent14_2/2).
prim(latent250_2/2).
prim(latent96_2/2).
prim(latent7_2/2).
prim(latent819_2/2).
prim(latent13_2/2).
prim(latent1894_2/2).
prim(latent1458_3/2).
prim(latent110_3/2).
prim(latent163_2/2).
prim(latent98_2/2).
prim(latent570_3/2).
prim(latent1228_2/2).
prim(latent1568_2/2).
prim(latent19_3/2).
prim(latent145_2/2).
prim(latent959_2/2).
prim(latent115_2/2).
prim(latent113_2/2).
prim(latent43_3/2).
prim(latent221_2/2).
prim(latent629_2/2).
prim(latent122_2/2).
prim(latent29_3/2).
prim(latent268_2/2).
prim(latent1/2).
prim(latent149_2/2).
prim(latent1413_3/2).
prim(latent18_3/2).
prim(latent358_2/2).
prim(latent1402_3/2).
prim(latent32_3/2).
prim(latent1533_3/2).
prim(latent1362_3/2).
prim(latent107_2/2).
prim(latent754_2/2).
prim(latent1906_3/2).
prim(latent129_2/2).
prim(latent436_3/2).
prim(latent22_2/2).
prim(latent38_3/2).
prim(latent1073_3/2).
prim(latent1425_3/2).
prim(latent750_3/2).
prim(latent44_3/2).
prim(latent408_2/2).
prim(latent1217_3/2).
prim(latent26_3/2).
prim(latent3_2/2).
prim(latent28_3/2).
prim(latent146_2/2).
prim(latent118_2/2).
prim(latent1797_2/2).
prim(latent1357_3/2).
prim(latent300_2/2).
prim(latent4/2).
prim(latent154_2/2).
prim(latent226_2/2).
prim(latent24_2/2).
prim(latent309_2/2).
prim(latent305_2/2).
prim(latent37_3/2).
prim(latent371_2/2).
prim(latent15_2/2).
prim(latent325_2/2).
prim(latent1032_3/2).
prim(latent1226_2/2).
prim(latent751_2/2).
prim(latent137_2/2).
prim(latent91/2).
prim(latent1770_2/2).
prim(latent99_2/2).
prim(latent424_2/2).
prim(latent36_3/2).
prim(latent1800_2/2).
prim(latent1101_2/2).
prim(latent799_2/2).
prim(latent117_2/2).
prim(latent40_3/2).
prim(latent434_2/2).
prim(latent208_2/2).
prim(latent67_3/2).
prim(p1/2).
prim(p9/2).
prim(p10/2).
prim(p14/2).
prim(p15/2).
prim(p18/2).
prim(p47/2).
prim(p64/2).
prim(p66/2).
prim(p68/2).
prim(p120/2).
prim(p143/2).
prim(p307/2).
prim(p332/2).
prim(p435/2).
prim(p2/2).
prim(p3/2).
prim(p19/2).
prim(p34/2).
prim(p57/2).
prim(p96/2).
prim(p113/2).
prim(p134/2).
prim(p145/2).
prim(p155/2).
prim(p162/2).
prim(p223/2).
prim(p226/2).
prim(p266/2).
prim(p278/2).
prim(p296/2).
prim(p298/2).
prim(p337/2).
prim(p339/2).
prim(p385/2).
prim(p387/2).
prim(p446/2).
prim(p453/2).
prim(p546/2).
prim(p4/2).
prim(p13/2).
prim(p23/2).
prim(p30/2).
prim(p31/2).
prim(p33/2).
prim(p38/2).
prim(p42/2).
prim(p60/2).
prim(p62/2).
prim(p67/2).
prim(p78/2).
prim(p83/2).
prim(p85/2).
prim(p86/2).
prim(p90/2).
prim(p91/2).
prim(p102/2).
prim(p108/2).
prim(p115/2).
prim(p121/2).
prim(p125/2).
prim(p133/2).
prim(p139/2).
prim(p147/2).
prim(p170/2).
prim(p191/2).
prim(p199/2).
prim(p203/2).
prim(p224/2).
prim(p245/2).
prim(p247/2).
prim(p271/2).
prim(p290/2).
prim(p342/2).
prim(p361/2).
prim(p390/2).
prim(p398/2).
prim(p431/2).
prim(p440/2).
prim(p465/2).
prim(p500/2).
prim(p524/2).
prim(p549/2).
prim(p558/2).
prim(p562/2).
prim(p585/2).
prim(p598/2).
prim(p5/2).
prim(p50/2).
prim(p65/2).
prim(p71/2).
prim(p72/2).
prim(p74/2).
prim(p80/2).
prim(p80/2).
prim(p84/2).
prim(p92/2).
prim(p92/2).
prim(p114/2).
prim(p114/2).
prim(p142/2).
prim(p180/2).
prim(p184/2).
prim(p189/2).
prim(p195/2).
prim(p209/2).
prim(p228/2).
prim(p228/2).
prim(p238/2).
prim(p238/2).
prim(p265/2).
prim(p275/2).
prim(p275/2).
prim(p294/2).
prim(p297/2).
prim(p302/2).
prim(p302/2).
prim(p329/2).
prim(p349/2).
prim(p353/2).
prim(p357/2).
prim(p357/2).
prim(p367/2).
prim(p375/2).
prim(p375/2).
prim(p382/2).
prim(p382/2).
prim(p391/2).
prim(p391/2).
prim(p404/2).
prim(p412/2).
prim(p418/2).
prim(p429/2).
prim(p436/2).
prim(p447/2).
prim(p451/2).
prim(p451/2).
prim(p452/2).
prim(p461/2).
prim(p467/2).
prim(p507/2).
prim(p555/2).
prim(p572/2).
prim(p577/2).
prim(p577/2).
prim(p589/2).
prim(p167/2).
prim(p187/2).
prim(p249/2).
prim(p340/2).
prim(p420/2).
prim(p551/2).
prim(p573/2).
prim(p21/2).
prim(p53/2).
prim(p59/2).
prim(p87/2).
prim(p87/2).
prim(p98/2).
prim(p116/2).
prim(p118/2).
prim(p140/2).
prim(p158/2).
prim(p281/2).
prim(p281/2).
prim(p283/2).
prim(p301/2).
prim(p315/2).
prim(p347/2).
prim(p372/2).
prim(p421/2).
prim(p441/2).
prim(p463/2).
prim(p464/2).
prim(p490/2).
prim(p497/2).
prim(p502/2).
prim(p516/2).
prim(p523/2).
prim(p534/2).
prim(p11/2).
prim(p12/2).
prim(p12/2).
prim(p43/2).
prim(p51/2).
prim(p156/2).
prim(p156/2).
prim(p181/2).
prim(p194/2).
prim(p197/2).
prim(p202/2).
prim(p258/2).
prim(p274/2).
prim(p279/2).
prim(p280/2).
prim(p282/2).
prim(p310/2).
prim(p313/2).
prim(p354/2).
prim(p359/2).
prim(p411/2).
prim(p424/2).
prim(p456/2).
prim(p479/2).
prim(p501/2).
prim(p519/2).
prim(p542/2).
prim(p554/2).
prim(p557/2).
prim(p557/2).
prim(p586/2).
prim(p586/2).
prim(p94/2).
prim(p161/2).
prim(p41/2).
prim(p49/2).
prim(p70/2).
prim(p97/2).
prim(p107/2).
prim(p128/2).
prim(p132/2).
prim(p136/2).
prim(p177/2).
prim(p208/2).
prim(p221/2).
prim(p231/2).
prim(p250/2).
prim(p253/2).
prim(p260/2).
prim(p261/2).
prim(p288/2).
prim(p299/2).
prim(p300/2).
prim(p338/2).
prim(p345/2).
prim(p366/2).
prim(p370/2).
prim(p389/2).
prim(p401/2).
prim(p403/2).
prim(p406/2).
prim(p407/2).
prim(p428/2).
prim(p437/2).
prim(p455/2).
prim(p474/2).
prim(p478/2).
prim(p509/2).
prim(p525/2).
prim(p533/2).
prim(p543/2).
prim(p600/2).
prim(p54/2).
prim(p241/2).
prim(p322/2).
prim(p410/2).
prim(p6/2).
prim(p24/2).
prim(p27/2).
prim(p44/2).
prim(p76/2).
prim(p77/2).
prim(p99/2).
prim(p119/2).
prim(p119/2).
prim(p131/2).
prim(p137/2).
prim(p150/2).
prim(p204/2).
prim(p232/2).
prim(p303/2).
prim(p335/2).
prim(p343/2).
prim(p376/2).
prim(p417/2).
prim(p438/2).
prim(p442/2).
prim(p448/2).
prim(p499/2).
prim(p512/2).
prim(p531/2).
prim(p430/2).
prim(p7/2).
prim(p36/2).
prim(p45/2).
prim(p46/2).
prim(p48/2).
prim(p56/2).
prim(p58/2).
prim(p69/2).
prim(p82/2).
prim(p89/2).
prim(p105/2).
prim(p110/2).
prim(p117/2).
prim(p138/2).
prim(p159/2).
prim(p164/2).
prim(p165/2).
prim(p183/2).
prim(p213/2).
prim(p235/2).
prim(p248/2).
prim(p291/2).
prim(p293/2).
prim(p344/2).
prim(p350/2).
prim(p356/2).
prim(p377/2).
prim(p379/2).
prim(p381/2).
prim(p426/2).
prim(p444/2).
prim(p472/2).
prim(p475/2).
prim(p477/2).
prim(p488/2).
prim(p498/2).
prim(p505/2).
prim(p520/2).
prim(p529/2).
prim(p530/2).
prim(p537/2).
prim(p540/2).
prim(p563/2).
prim(p568/2).
prim(p16/2).
prim(p20/2).
prim(p35/2).
prim(p73/2).
prim(p151/2).
prim(p163/2).
prim(p173/2).
prim(p186/2).
prim(p198/2).
prim(p205/2).
prim(p207/2).
prim(p236/2).
prim(p243/2).
prim(p244/2).
prim(p263/2).
prim(p316/2).
prim(p362/2).
prim(p394/2).
prim(p405/2).
prim(p432/2).
prim(p460/2).
prim(p468/2).
prim(p487/2).
prim(p489/2).
prim(p491/2).
prim(p503/2).
prim(p508/2).
prim(p521/2).
prim(p526/2).
prim(p560/2).
prim(p564/2).
prim(p567/2).
prim(p579/2).
prim(p579/2).
prim(p592/2).
prim(p595/2).
prim(p596/2).
prim(p597/2).
prim(p599/2).
prim(p176/2).
prim(p185/2).
prim(p348/2).
prim(p476/2).
prim(p550/2).
prim(p17/2).
prim(p17/2).
prim(p103/2).
prim(p103/2).
prim(p141/2).
prim(p141/2).
prim(p210/2).
prim(p210/2).
prim(p308/2).
prim(p308/2).
prim(p324/2).
prim(p324/2).
prim(p28/2).
prim(p28/2).
prim(p481/2).
prim(p481/2).
prim(p219/2).
prim(p219/2).

metarule(precon,[P/2,Q/1,R/2],([P,A,B]:-[[Q,A],[R,A,B]])).
metarule(postcon,[P/2,Q/2,R/1],([P,A,B]:-[[Q,A,B],[R,B]])).
metarule(chain,[P/2,Q/2,R/2],([P,A,B]:-[[Q,A,C],[R,C,B]])).
metarule(tailrec,[P/2,Q/2],([P,A,B]:-[[Q,A,C],[P,C,B]])).
%% metarule(curry3,[P/2,Q/3,C/0],([P,A,B]:-[[Q,A,B,C]])).

  
a:-
    cpus(CPU_COUNT),
    set_prolog_flag(cpu_count,CPU_COUNT),
    games(Games),
    playgol(Games),
    b,
    halt.

b:-
    cpus(CPU_COUNT),
    set_prolog_flag(cpu_count,CPU_COUNT),
    %get_time(T),
    %stamp_date_time(T, date(DY,DM,DD,TH,TM,TS,_,_,_), 'UTC'),
    %format('% started solving build tasks at ~w ~w ~w ~w:~w:~w\n', [DD, DM, DY, TH, TM, TS]),
    max_build_depth(BuildDepth),
    playgol:update_depth(BuildDepth),
    max_build_time(BuildTime),
    retractall(max_time(_)),
    assert(max_time(BuildTime)),
    tasks(Tasks),
    learn_tasks(Tasks,Progs),
    length(Progs,N),
    format('% num solved ~w\n',[N]),
    %get_time(T2),
    %stamp_date_time(T2, date(DY2,DM2,DD2,TH2,TM2,TS2,_,_,_), 'UTC'),
    %format('% finished solving build tasks at ~w ~w ~w ~w:~w:~w\n', [DD2, DM2, DY2, TH2, TM2, TS2]),
    halt.

learn_tasks(Tasks,Progs):-
    concurrent_maplist(learn_aux,Tasks,Xs),
    findall(true,member(true,Xs),Progs).

learn_aux(T,true):-
    train_examples(T,Pos,Neg),
    max_time(MaxTime),
    get_time(TTT),
    stamp_date_time(TTT, date(DY,DM,DD,TH,TM,TS,_,_,_), 'UTC'),
    format('% started solving build task at ~w ~w ~w ~w:~w:~w\n', [DD, DM, DY, TH, TM, TS]),
    catch(call_with_time_limit(MaxTime,learn(Pos,Neg,Prog)),time_limit_exceeded,(writeln('%timeout'),false)),!,
    get_time(TTT2),
    stamp_date_time(TTT2, date(DY2,DM2,DD2,TH2,TM2,TS2,_,_,_), 'UTC'),
    format('% finished solving build tasks at ~w ~w ~w ~w:~w:~w\n', [DD2, DM2, DY2, TH2, TM2, TS2]),
    pprint(Prog).
learn_aux(_,false).

do_test:-
    tasks(Tasks),
    maplist(do_test,Tasks),
    halt.

do_test(Task):-
    test_examples(Task,Pos),
    (current_predicate(Task/2) ->
        (
            format('%solved,~w,~w\n',[Task,1]),
            forall(member(X,Pos),(call(X) -> format('~w,~w\n',[1,1]); format('~w,~w\n',[1,0])))
        );
        (
            format('%solved,~w,~w\n',[Task,0]),
            forall(member(_,Pos),format('~w,~w\n',[0,0]))
        )).

gen_e(Task,Input,Output,Out):-
    Out=..[Task,s(Input,Output),s(_,[])].

play_examples(Task,Pos,[]):-
    findall(X,(play_pos(Task,A,B),gen_e(Task,A,B,X)),Pos1),
    sort_examples(Pos1,Pos).

train_examples(Task,Pos,[]):-
    findall(X,(build_pos(Task,A,B),gen_e(Task,A,B,X)),Pos1),
    sort_examples(Pos1,Pos).

test_examples(Task,Pos):-
    findall(X,(test_pos(Task,A,B),gen_e(Task,A,B,X)),Pos).

add_len(Atom,Len-Atom):-
    Atom=..[_Task,s(Input,_Output),s(_,[])],
    length(Input,Len).
remove_len(_-Atom,Atom).

sort_examples(L1,L2):-
  maplist(add_len,L1,L3),
  keysort(L3,L4),
  maplist(remove_len,L4,L2).

