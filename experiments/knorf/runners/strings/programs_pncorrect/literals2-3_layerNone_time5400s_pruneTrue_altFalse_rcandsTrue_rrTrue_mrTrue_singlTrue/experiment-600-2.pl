
:-['../playgol'].
:-['string-bk'].
:-['../metagol'].

:-['./programs_pncorrect/literals2-3_layerNone_time5400s_pruneTrue_altFalse_rcandsTrue_rrTrue_mrTrue_singlTrue/refactored_primitives-600-2.pl'].



:- use_module(library(time)).

play_time_interval(2).
max_build_time(60).
max_play_depth(4).
max_build_depth(5).
cpus(4).

metagol:functional.
%% metagol:max_clauses(10).

func_test([P,s(In,Out1),s(_,[])],PS,G):-
  \+ (metagol :prove_deduce([[P,s(In,Out2),s(_,[])]],PS,G),Out1\= Out2).



%% tell metagol to use the BK
prim(is_empty/1).
prim(not_empty/1). % maybe?

prim(is_space/1).
prim(not_space/1). % maybe?

prim(is_uppercase/1).
prim(is_lowercase/1).

prim(is_letter/1).
prim(not_letter/1).

prim(is_number/1).
prim(not_number/1).

prim(copy1/2).
prim(skip1/2).
prim(mk_uppercase/2).
prim(mk_lowercase/2).
%% prim(write1/3).

prim(latent1409_3/2).
prim(latent1250_2/2).
prim(latent217_2/2).
prim(latent506_2/2).
prim(latent1/2).
prim(latent1980_3/2).
prim(latent1510_2/2).
prim(latent300_2/2).
prim(latent35_3/2).
prim(latent199_2/2).
prim(latent167_2/2).
prim(latent8_2/2).
prim(latent1428_3/2).
prim(latent120_2/2).
prim(latent1198_2/2).
prim(latent1714_3/2).
prim(latent211_2/2).
prim(latent379_2/2).
prim(latent76_3/2).
prim(latent1514_3/2).
prim(latent191_2/2).
prim(latent142_2/2).
prim(latent303_2/2).
prim(latent1500_3/2).
prim(latent227_2/2).
prim(latent328_2/2).
prim(latent280_2/2).
prim(latent410_2/2).
prim(latent1585_3/2).
prim(latent21_3/2).
prim(latent1557_3/2).
prim(latent1524_3/2).
prim(latent1435_3/2).
prim(latent203_2/2).
prim(latent274_3/2).
prim(latent350_2/2).
prim(latent29_3/2).
prim(latent1421_3/2).
prim(latent182_2/2).
prim(latent186_2/2).
prim(latent1388_3/2).
prim(latent661_2/2).
prim(latent1548_3/2).
prim(latent772_2/2).
prim(latent261_2/2).
prim(latent26_3/2).
prim(latent41_3/2).
prim(latent787_2/2).
prim(latent202_2/2).
prim(latent127_2/2).
prim(latent39_3/2).
prim(latent213_2/2).
prim(latent189_2/2).
prim(latent1257_3/2).
prim(latent1422_3/2).
prim(latent696_2/2).
prim(latent700_2/2).
prim(latent270_2/2).
prim(latent1802_2/2).
prim(latent1489_2/2).
prim(latent19_3/2).
prim(latent294_2/2).
prim(latent77_3/2).
prim(latent159_2/2).
prim(latent292_2/2).
prim(latent204_2/2).
prim(latent37_3/2).
prim(latent169_2/2).
prim(latent249_2/2).
prim(latent30_3/2).
prim(latent296_2/2).
prim(latent337_2/2).
prim(latent411_3/2).
prim(latent644_3/2).
prim(latent1394_3/2).
prim(latent1573_3/2).
prim(latent188_2/2).
prim(latent31_3/2).
prim(latent218_2/2).
prim(latent239_3/2).
prim(latent1366_3/2).
prim(latent896_2/2).
prim(latent1857_2/2).
prim(latent1321_2/2).
prim(latent42_2/2).
prim(latent258_2/2).
prim(latent246_2/2).
prim(latent230_2/2).
prim(latent359_2/2).
prim(latent46_3/2).
prim(latent451_3/2).
prim(latent635_2/2).
prim(latent845_3/2).
prim(latent365_2/2).
prim(latent83/2).
prim(latent360_2/2).
prim(latent257_2/2).
prim(latent1373_2/2).
prim(latent286_2/2).
prim(latent651_2/2).
prim(latent511_2/2).
prim(latent247_2/2).
prim(latent1360_3/2).
prim(latent87_2/2).
prim(latent260_2/2).
prim(latent291_2/2).
prim(latent1506_3/2).
prim(latent47_3/2).
prim(latent608_3/2).
prim(latent1381_3/2).
prim(latent324_2/2).
prim(latent7_2/2).
prim(latent1560_3/2).
prim(latent2149_3/2).
prim(latent357_2/2).
prim(latent1232_2/2).
prim(latent250_2/2).
prim(latent23_3/2).
prim(latent789_2/2).
prim(latent4/2).
prim(latent48_3/2).
prim(latent850_2/2).
prim(latent85_2/2).
prim(latent874_3/2).
prim(latent1461_3/2).
prim(latent1242_3/2).
prim(latent10_2/2).
prim(latent192_2/2).
prim(latent353_2/2).
prim(latent151_2/2).
prim(latent181_2/2).
prim(latent16_2/2).
prim(latent9_2/2).
prim(latent467_2/2).
prim(latent1157_2/2).
prim(latent185_2/2).
prim(latent92_2/2).
prim(latent582_2/2).
prim(latent63_3/2).
prim(latent3/2).
prim(latent955_3/2).
prim(latent836_2/2).
prim(latent262_3/2).
prim(latent206_2/2).
prim(latent683_3/2).
prim(latent1390_3/2).
prim(latent118_2/2).
prim(latent242_2/2).
prim(latent1046_3/2).
prim(latent1441_3/2).
prim(latent33_3/2).
prim(latent1575_3/2).
prim(latent1416_3/2).
prim(latent2189_3/2).
prim(latent285_3/2).
prim(latent497_2/2).
prim(latent532_2/2).
prim(latent371_2/2).
prim(latent1263_3/2).
prim(latent1609_3/2).
prim(latent99_2/2).
prim(latent32_3/2).
prim(latent214_2/2).
prim(latent12_2/2).
prim(latent1833_2/2).
prim(latent89_2/2).
prim(latent1509_3/2).
prim(latent58_3/2).
prim(latent1289_3/2).
prim(latent1495_3/2).
prim(latent15_2/2).
prim(latent559_2/2).
prim(latent212_2/2).
prim(latent27_3/2).
prim(latent316_2/2).
prim(latent241_2/2).
prim(latent1445_3/2).
prim(latent138_2/2).
prim(latent174_2/2).
prim(latent505_2/2).
prim(latent17_3/2).
prim(latent1314_2/2).
prim(latent264_2/2).
prim(latent1677_2/2).
prim(latent1173_3/2).
prim(latent1140_3/2).
prim(latent131_2/2).
prim(latent2_2/2).
prim(latent50_2/2).
prim(latent18_3/2).
prim(latent306_2/2).
prim(latent20_2/2).
prim(latent1562_3/2).
prim(latent38_2/2).
prim(latent489_3/2).
prim(latent1450_3/2).
prim(latent5_2/2).
prim(latent963_2/2).
prim(latent558_2/2).
prim(latent207_2/2).
prim(latent154_2/2).
prim(latent13_2/2).
prim(latent14_2/2).
prim(latent1375_3/2).
prim(latent295_2/2).
prim(latent6/2).
prim(latent477_3/2).
prim(latent931_2/2).
prim(latent672_3/2).
prim(latent184_2/2).
prim(latent11_2/2).
prim(latent25_3/2).
prim(latent1765_3/2).
prim(latent59_3/2).
prim(latent195_2/2).
prim(latent348_2/2).
prim(latent344_2/2).
prim(latent136_2/2).
prim(p3/2).
prim(p8/2).
prim(p9/2).
prim(p32/2).
prim(p37/2).
prim(p71/2).
prim(p90/2).
prim(p104/2).
prim(p107/2).
prim(p113/2).
prim(p189/2).
prim(p206/2).
prim(p239/2).
prim(p240/2).
prim(p309/2).
prim(p432/2).
prim(p4/2).
prim(p4/2).
prim(p16/2).
prim(p17/2).
prim(p21/2).
prim(p24/2).
prim(p30/2).
prim(p30/2).
prim(p42/2).
prim(p53/2).
prim(p53/2).
prim(p61/2).
prim(p61/2).
prim(p64/2).
prim(p106/2).
prim(p106/2).
prim(p109/2).
prim(p112/2).
prim(p112/2).
prim(p132/2).
prim(p132/2).
prim(p136/2).
prim(p138/2).
prim(p196/2).
prim(p196/2).
prim(p207/2).
prim(p211/2).
prim(p213/2).
prim(p223/2).
prim(p223/2).
prim(p244/2).
prim(p257/2).
prim(p277/2).
prim(p282/2).
prim(p299/2).
prim(p308/2).
prim(p312/2).
prim(p319/2).
prim(p342/2).
prim(p347/2).
prim(p347/2).
prim(p377/2).
prim(p401/2).
prim(p441/2).
prim(p456/2).
prim(p468/2).
prim(p480/2).
prim(p513/2).
prim(p513/2).
prim(p529/2).
prim(p529/2).
prim(p553/2).
prim(p553/2).
prim(p566/2).
prim(p573/2).
prim(p27/2).
prim(p86/2).
prim(p139/2).
prim(p330/2).
prim(p409/2).
prim(p487/2).
prim(p5/2).
prim(p15/2).
prim(p33/2).
prim(p39/2).
prim(p47/2).
prim(p48/2).
prim(p65/2).
prim(p69/2).
prim(p79/2).
prim(p87/2).
prim(p96/2).
prim(p144/2).
prim(p149/2).
prim(p153/2).
prim(p174/2).
prim(p175/2).
prim(p188/2).
prim(p227/2).
prim(p235/2).
prim(p253/2).
prim(p278/2).
prim(p288/2).
prim(p322/2).
prim(p332/2).
prim(p346/2).
prim(p373/2).
prim(p379/2).
prim(p385/2).
prim(p390/2).
prim(p421/2).
prim(p422/2).
prim(p424/2).
prim(p425/2).
prim(p428/2).
prim(p485/2).
prim(p506/2).
prim(p521/2).
prim(p525/2).
prim(p576/2).
prim(p592/2).
prim(p19/2).
prim(p22/2).
prim(p73/2).
prim(p89/2).
prim(p102/2).
prim(p120/2).
prim(p128/2).
prim(p164/2).
prim(p230/2).
prim(p234/2).
prim(p242/2).
prim(p261/2).
prim(p314/2).
prim(p334/2).
prim(p345/2).
prim(p380/2).
prim(p431/2).
prim(p548/2).
prim(p551/2).
prim(p563/2).
prim(p565/2).
prim(p1/2).
prim(p2/2).
prim(p14/2).
prim(p34/2).
prim(p40/2).
prim(p45/2).
prim(p45/2).
prim(p50/2).
prim(p103/2).
prim(p127/2).
prim(p127/2).
prim(p133/2).
prim(p156/2).
prim(p157/2).
prim(p165/2).
prim(p195/2).
prim(p200/2).
prim(p215/2).
prim(p229/2).
prim(p329/2).
prim(p338/2).
prim(p341/2).
prim(p341/2).
prim(p349/2).
prim(p386/2).
prim(p400/2).
prim(p403/2).
prim(p433/2).
prim(p455/2).
prim(p519/2).
prim(p562/2).
prim(p564/2).
prim(p567/2).
prim(p570/2).
prim(p577/2).
prim(p582/2).
prim(p28/2).
prim(p36/2).
prim(p38/2).
prim(p46/2).
prim(p62/2).
prim(p63/2).
prim(p119/2).
prim(p121/2).
prim(p145/2).
prim(p187/2).
prim(p194/2).
prim(p267/2).
prim(p289/2).
prim(p337/2).
prim(p362/2).
prim(p371/2).
prim(p413/2).
prim(p434/2).
prim(p474/2).
prim(p489/2).
prim(p530/2).
prim(p589/2).
prim(p595/2).
prim(p41/2).
prim(p44/2).
prim(p52/2).
prim(p81/2).
prim(p83/2).
prim(p97/2).
prim(p137/2).
prim(p147/2).
prim(p147/2).
prim(p166/2).
prim(p197/2).
prim(p199/2).
prim(p204/2).
prim(p220/2).
prim(p238/2).
prim(p248/2).
prim(p263/2).
prim(p283/2).
prim(p285/2).
prim(p310/2).
prim(p318/2).
prim(p328/2).
prim(p357/2).
prim(p388/2).
prim(p407/2).
prim(p420/2).
prim(p442/2).
prim(p458/2).
prim(p494/2).
prim(p498/2).
prim(p503/2).
prim(p533/2).
prim(p549/2).
prim(p561/2).
prim(p583/2).
prim(p581/2).
prim(p7/2).
prim(p12/2).
prim(p20/2).
prim(p23/2).
prim(p29/2).
prim(p55/2).
prim(p68/2).
prim(p82/2).
prim(p115/2).
prim(p126/2).
prim(p141/2).
prim(p161/2).
prim(p172/2).
prim(p186/2).
prim(p192/2).
prim(p193/2).
prim(p210/2).
prim(p252/2).
prim(p262/2).
prim(p268/2).
prim(p275/2).
prim(p275/2).
prim(p292/2).
prim(p296/2).
prim(p297/2).
prim(p300/2).
prim(p306/2).
prim(p335/2).
prim(p336/2).
prim(p354/2).
prim(p374/2).
prim(p383/2).
prim(p411/2).
prim(p459/2).
prim(p473/2).
prim(p477/2).
prim(p510/2).
prim(p511/2).
prim(p511/2).
prim(p524/2).
prim(p526/2).
prim(p538/2).
prim(p540/2).
prim(p544/2).
prim(p560/2).
prim(p580/2).
prim(p585/2).
prim(p597/2).
prim(p51/2).
prim(p131/2).
prim(p546/2).
prim(p10/2).
prim(p18/2).
prim(p35/2).
prim(p43/2).
prim(p57/2).
prim(p78/2).
prim(p80/2).
prim(p94/2).
prim(p95/2).
prim(p130/2).
prim(p155/2).
prim(p163/2).
prim(p171/2).
prim(p176/2).
prim(p181/2).
prim(p184/2).
prim(p198/2).
prim(p221/2).
prim(p231/2).
prim(p237/2).
prim(p250/2).
prim(p258/2).
prim(p270/2).
prim(p271/2).
prim(p274/2).
prim(p280/2).
prim(p281/2).
prim(p326/2).
prim(p343/2).
prim(p352/2).
prim(p355/2).
prim(p366/2).
prim(p369/2).
prim(p393/2).
prim(p415/2).
prim(p435/2).
prim(p445/2).
prim(p450/2).
prim(p452/2).
prim(p461/2).
prim(p490/2).
prim(p495/2).
prim(p505/2).
prim(p523/2).
prim(p532/2).
prim(p537/2).
prim(p539/2).
prim(p543/2).
prim(p572/2).
prim(p574/2).
prim(p578/2).
prim(p593/2).
prim(p49/2).
prim(p467/2).
prim(p31/2).
prim(p67/2).
prim(p160/2).
prim(p178/2).
prim(p203/2).
prim(p219/2).
prim(p245/2).
prim(p247/2).
prim(p256/2).
prim(p260/2).
prim(p290/2).
prim(p290/2).
prim(p320/2).
prim(p356/2).
prim(p382/2).
prim(p389/2).
prim(p389/2).
prim(p404/2).
prim(p414/2).
prim(p430/2).
prim(p454/2).
prim(p476/2).
prim(p476/2).
prim(p479/2).
prim(p496/2).
prim(p509/2).
prim(p515/2).
prim(p547/2).
prim(p557/2).
prim(p587/2).
prim(p596/2).
prim(p596/2).
prim(p116/2).
prim(p135/2).
prim(p541/2).
prim(p351/2).
prim(p185/2).
prim(p185/2).
prim(p185/2).
prim(p246/2).
prim(p246/2).
prim(p502/2).
prim(p502/2).

metarule(precon,[P/2,Q/1,R/2],([P,A,B]:-[[Q,A],[R,A,B]])).
metarule(postcon,[P/2,Q/2,R/1],([P,A,B]:-[[Q,A,B],[R,B]])).
metarule(chain,[P/2,Q/2,R/2],([P,A,B]:-[[Q,A,C],[R,C,B]])).
metarule(tailrec,[P/2,Q/2],([P,A,B]:-[[Q,A,C],[P,C,B]])).
%% metarule(curry3,[P/2,Q/3,C/0],([P,A,B]:-[[Q,A,B,C]])).

  
a:-
    cpus(CPU_COUNT),
    set_prolog_flag(cpu_count,CPU_COUNT),
    games(Games),
    playgol(Games),
    b,
    halt.

b:-
    cpus(CPU_COUNT),
    set_prolog_flag(cpu_count,CPU_COUNT),
    %get_time(T),
    %stamp_date_time(T, date(DY,DM,DD,TH,TM,TS,_,_,_), 'UTC'),
    %format('% started solving build tasks at ~w ~w ~w ~w:~w:~w\n', [DD, DM, DY, TH, TM, TS]),
    max_build_depth(BuildDepth),
    playgol:update_depth(BuildDepth),
    max_build_time(BuildTime),
    retractall(max_time(_)),
    assert(max_time(BuildTime)),
    tasks(Tasks),
    learn_tasks(Tasks,Progs),
    length(Progs,N),
    format('% num solved ~w\n',[N]),
    %get_time(T2),
    %stamp_date_time(T2, date(DY2,DM2,DD2,TH2,TM2,TS2,_,_,_), 'UTC'),
    %format('% finished solving build tasks at ~w ~w ~w ~w:~w:~w\n', [DD2, DM2, DY2, TH2, TM2, TS2]),
    halt.

learn_tasks(Tasks,Progs):-
    concurrent_maplist(learn_aux,Tasks,Xs),
    findall(true,member(true,Xs),Progs).

learn_aux(T,true):-
    train_examples(T,Pos,Neg),
    max_time(MaxTime),
    get_time(TTT),
    stamp_date_time(TTT, date(DY,DM,DD,TH,TM,TS,_,_,_), 'UTC'),
    format('% started solving build task at ~w ~w ~w ~w:~w:~w\n', [DD, DM, DY, TH, TM, TS]),
    catch(call_with_time_limit(MaxTime,learn(Pos,Neg,Prog)),time_limit_exceeded,(writeln('%timeout'),false)),!,
    get_time(TTT2),
    stamp_date_time(TTT2, date(DY2,DM2,DD2,TH2,TM2,TS2,_,_,_), 'UTC'),
    format('% finished solving build tasks at ~w ~w ~w ~w:~w:~w\n', [DD2, DM2, DY2, TH2, TM2, TS2]),
    pprint(Prog).
learn_aux(_,false).

do_test:-
    tasks(Tasks),
    maplist(do_test,Tasks),
    halt.

do_test(Task):-
    test_examples(Task,Pos),
    (current_predicate(Task/2) ->
        (
            format('%solved,~w,~w\n',[Task,1]),
            forall(member(X,Pos),(call(X) -> format('~w,~w\n',[1,1]); format('~w,~w\n',[1,0])))
        );
        (
            format('%solved,~w,~w\n',[Task,0]),
            forall(member(_,Pos),format('~w,~w\n',[0,0]))
        )).

gen_e(Task,Input,Output,Out):-
    Out=..[Task,s(Input,Output),s(_,[])].

play_examples(Task,Pos,[]):-
    findall(X,(play_pos(Task,A,B),gen_e(Task,A,B,X)),Pos1),
    sort_examples(Pos1,Pos).

train_examples(Task,Pos,[]):-
    findall(X,(build_pos(Task,A,B),gen_e(Task,A,B,X)),Pos1),
    sort_examples(Pos1,Pos).

test_examples(Task,Pos):-
    findall(X,(test_pos(Task,A,B),gen_e(Task,A,B,X)),Pos).

add_len(Atom,Len-Atom):-
    Atom=..[_Task,s(Input,_Output),s(_,[])],
    length(Input,Len).
remove_len(_-Atom,Atom).

sort_examples(L1,L2):-
  maplist(add_len,L1,L3),
  keysort(L3,L4),
  maplist(remove_len,L4,L2).

