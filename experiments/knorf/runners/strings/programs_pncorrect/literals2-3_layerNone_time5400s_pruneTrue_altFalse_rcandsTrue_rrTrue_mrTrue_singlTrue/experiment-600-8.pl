
:-['../playgol'].
:-['string-bk'].
:-['../metagol'].

:-['./programs_pncorrect/literals2-3_layerNone_time5400s_pruneTrue_altFalse_rcandsTrue_rrTrue_mrTrue_singlTrue/refactored_primitives-600-8.pl'].



:- use_module(library(time)).

play_time_interval(2).
max_build_time(60).
max_play_depth(4).
max_build_depth(5).
cpus(4).

metagol:functional.
%% metagol:max_clauses(10).

func_test([P,s(In,Out1),s(_,[])],PS,G):-
  \+ (metagol :prove_deduce([[P,s(In,Out2),s(_,[])]],PS,G),Out1\= Out2).



%% tell metagol to use the BK
prim(is_empty/1).
prim(not_empty/1). % maybe?

prim(is_space/1).
prim(not_space/1). % maybe?

prim(is_uppercase/1).
prim(is_lowercase/1).

prim(is_letter/1).
prim(not_letter/1).

prim(is_number/1).
prim(not_number/1).

prim(copy1/2).
prim(skip1/2).
prim(mk_uppercase/2).
prim(mk_lowercase/2).
%% prim(write1/3).

prim(latent194_2/2).
prim(latent304_2/2).
prim(latent104_2/2).
prim(latent465_3/2).
prim(latent23_2/2).
prim(latent271_2/2).
prim(latent205_2/2).
prim(latent45_3/2).
prim(latent198_2/2).
prim(latent1435_3/2).
prim(latent1057_2/2).
prim(latent7_2/2).
prim(latent640_3/2).
prim(latent1933_3/2).
prim(latent524_3/2).
prim(latent1381_3/2).
prim(latent251_2/2).
prim(latent31_3/2).
prim(latent1165_3/2).
prim(latent1701_2/2).
prim(latent34_3/2).
prim(latent10_2/2).
prim(latent94_2/2).
prim(latent5_2/2).
prim(latent141_2/2).
prim(latent26_3/2).
prim(latent93_2/2).
prim(latent178_2/2).
prim(latent100_2/2).
prim(latent16_2/2).
prim(latent53_3/2).
prim(latent1659_3/2).
prim(latent123_2/2).
prim(latent566_3/2).
prim(latent18_2/2).
prim(latent240_3/2).
prim(latent875_3/2).
prim(latent97_2/2).
prim(latent86_2/2).
prim(latent15_2/2).
prim(latent41_3/2).
prim(latent622_3/2).
prim(latent539_3/2).
prim(latent13/2).
prim(latent841_2/2).
prim(latent32_3/2).
prim(latent433_3/2).
prim(latent36_2/2).
prim(latent12_2/2).
prim(latent912_2/2).
prim(latent614_3/2).
prim(latent1726_2/2).
prim(latent458_3/2).
prim(latent149_2/2).
prim(latent1600_2/2).
prim(latent30_3/2).
prim(latent267_2/2).
prim(latent293_2/2).
prim(latent1222_2/2).
prim(latent280_2/2).
prim(latent14_2/2).
prim(latent169_2/2).
prim(latent257_2/2).
prim(latent202_2/2).
prim(latent837_3/2).
prim(latent29_3/2).
prim(latent99_2/2).
prim(latent4_2/2).
prim(latent353_2/2).
prim(latent515_3/2).
prim(latent63_3/2).
prim(latent1005_3/2).
prim(latent172_2/2).
prim(latent43_3/2).
prim(latent21_3/2).
prim(latent786_3/2).
prim(latent117_2/2).
prim(latent318_2/2).
prim(latent84_2/2).
prim(latent1163_3/2).
prim(latent28_2/2).
prim(latent301_2/2).
prim(latent211_2/2).
prim(latent1747_2/2).
prim(latent24_3/2).
prim(latent394_3/2).
prim(latent138_2/2).
prim(latent1517_2/2).
prim(latent372_3/2).
prim(latent8_2/2).
prim(latent295_2/2).
prim(latent488_3/2).
prim(latent88_2/2).
prim(latent9/2).
prim(latent684_3/2).
prim(latent521_3/2).
prim(latent392_3/2).
prim(latent108_2/2).
prim(latent380_3/2).
prim(latent477_3/2).
prim(latent1104_3/2).
prim(latent714_3/2).
prim(latent22_3/2).
prim(latent757_2/2).
prim(latent6_2/2).
prim(latent705_3/2).
prim(latent92_2/2).
prim(latent1176_2/2).
prim(latent131_2/2).
prim(latent890_3/2).
prim(latent322_2/2).
prim(latent273_2/2).
prim(latent1193_2/2).
prim(latent993_3/2).
prim(latent972_3/2).
prim(latent33_3/2).
prim(latent599_3/2).
prim(latent80_3/2).
prim(latent96_2/2).
prim(latent103_2/2).
prim(latent475_2/2).
prim(latent58_3/2).
prim(latent89/2).
prim(latent168_2/2).
prim(latent307_2/2).
prim(latent42_3/2).
prim(latent223_2/2).
prim(latent1892_3/2).
prim(latent1/2).
prim(latent527_3/2).
prim(latent121_2/2).
prim(latent367_2/2).
prim(latent1458_2/2).
prim(latent1149_2/2).
prim(latent156_2/2).
prim(latent203_2/2).
prim(latent1773_3/2).
prim(latent78_3/2).
prim(latent442_2/2).
prim(latent39_3/2).
prim(latent85_2/2).
prim(latent109_2/2).
prim(latent1694_2/2).
prim(latent130_2/2).
prim(latent1246_2/2).
prim(latent146_2/2).
prim(latent38_3/2).
prim(latent379_2/2).
prim(latent561_3/2).
prim(latent3/2).
prim(latent87_3/2).
prim(latent11_2/2).
prim(latent981_3/2).
prim(latent669_3/2).
prim(latent489_2/2).
prim(latent441_3/2).
prim(latent371_2/2).
prim(latent95_2/2).
prim(latent398_2/2).
prim(latent19_3/2).
prim(latent106_2/2).
prim(latent275_2/2).
prim(latent27_3/2).
prim(latent587_3/2).
prim(latent478_3/2).
prim(latent417_2/2).
prim(latent603_3/2).
prim(latent682_3/2).
prim(latent40_3/2).
prim(latent329_2/2).
prim(latent283_2/2).
prim(latent1502_2/2).
prim(latent245_2/2).
prim(latent25_3/2).
prim(latent35_3/2).
prim(latent1916_2/2).
prim(latent856_2/2).
prim(latent554_3/2).
prim(latent2_2/2).
prim(latent64_3/2).
prim(latent1368_2/2).
prim(latent337_2/2).
prim(latent20_3/2).
prim(latent192_2/2).
prim(latent67_2/2).
prim(latent113_2/2).
prim(latent102_2/2).
prim(latent262_2/2).
prim(latent254_2/2).
prim(latent389_3/2).
prim(latent91_2/2).
prim(latent715_2/2).
prim(latent181_2/2).
prim(latent509_3/2).
prim(latent374_2/2).
prim(latent612_2/2).
prim(latent230_2/2).
prim(latent681_2/2).
prim(latent17_3/2).
prim(latent101_2/2).
prim(latent37_3/2).
prim(latent404_2/2).
prim(latent167_2/2).
prim(p1/2).
prim(p2/2).
prim(p6/2).
prim(p10/2).
prim(p16/2).
prim(p25/2).
prim(p31/2).
prim(p46/2).
prim(p63/2).
prim(p69/2).
prim(p94/2).
prim(p205/2).
prim(p212/2).
prim(p288/2).
prim(p345/2).
prim(p7/2).
prim(p23/2).
prim(p24/2).
prim(p36/2).
prim(p48/2).
prim(p49/2).
prim(p66/2).
prim(p76/2).
prim(p84/2).
prim(p108/2).
prim(p119/2).
prim(p126/2).
prim(p148/2).
prim(p155/2).
prim(p179/2).
prim(p247/2).
prim(p291/2).
prim(p330/2).
prim(p339/2).
prim(p404/2).
prim(p485/2).
prim(p536/2).
prim(p597/2).
prim(p14/2).
prim(p18/2).
prim(p40/2).
prim(p51/2).
prim(p82/2).
prim(p101/2).
prim(p102/2).
prim(p139/2).
prim(p156/2).
prim(p170/2).
prim(p182/2).
prim(p198/2).
prim(p211/2).
prim(p215/2).
prim(p226/2).
prim(p236/2).
prim(p237/2).
prim(p238/2).
prim(p257/2).
prim(p312/2).
prim(p338/2).
prim(p344/2).
prim(p360/2).
prim(p365/2).
prim(p371/2).
prim(p385/2).
prim(p406/2).
prim(p465/2).
prim(p476/2).
prim(p484/2).
prim(p504/2).
prim(p506/2).
prim(p512/2).
prim(p563/2).
prim(p583/2).
prim(p595/2).
prim(p44/2).
prim(p15/2).
prim(p58/2).
prim(p81/2).
prim(p92/2).
prim(p167/2).
prim(p173/2).
prim(p185/2).
prim(p187/2).
prim(p234/2).
prim(p234/2).
prim(p241/2).
prim(p275/2).
prim(p275/2).
prim(p281/2).
prim(p282/2).
prim(p301/2).
prim(p314/2).
prim(p337/2).
prim(p375/2).
prim(p381/2).
prim(p468/2).
prim(p472/2).
prim(p474/2).
prim(p529/2).
prim(p581/2).
prim(p581/2).
prim(p9/2).
prim(p28/2).
prim(p28/2).
prim(p45/2).
prim(p68/2).
prim(p71/2).
prim(p128/2).
prim(p132/2).
prim(p160/2).
prim(p165/2).
prim(p165/2).
prim(p175/2).
prim(p260/2).
prim(p268/2).
prim(p307/2).
prim(p318/2).
prim(p319/2).
prim(p319/2).
prim(p463/2).
prim(p513/2).
prim(p519/2).
prim(p578/2).
prim(p32/2).
prim(p32/2).
prim(p43/2).
prim(p59/2).
prim(p59/2).
prim(p61/2).
prim(p70/2).
prim(p93/2).
prim(p112/2).
prim(p114/2).
prim(p123/2).
prim(p123/2).
prim(p130/2).
prim(p147/2).
prim(p147/2).
prim(p150/2).
prim(p186/2).
prim(p194/2).
prim(p204/2).
prim(p208/2).
prim(p221/2).
prim(p229/2).
prim(p256/2).
prim(p259/2).
prim(p277/2).
prim(p277/2).
prim(p278/2).
prim(p289/2).
prim(p298/2).
prim(p298/2).
prim(p328/2).
prim(p336/2).
prim(p342/2).
prim(p370/2).
prim(p370/2).
prim(p383/2).
prim(p442/2).
prim(p446/2).
prim(p459/2).
prim(p473/2).
prim(p487/2).
prim(p487/2).
prim(p494/2).
prim(p559/2).
prim(p559/2).
prim(p568/2).
prim(p568/2).
prim(p570/2).
prim(p570/2).
prim(p589/2).
prim(p265/2).
prim(p265/2).
prim(p341/2).
prim(p462/2).
prim(p144/2).
prim(p3/2).
prim(p4/2).
prim(p4/2).
prim(p13/2).
prim(p21/2).
prim(p27/2).
prim(p27/2).
prim(p30/2).
prim(p38/2).
prim(p50/2).
prim(p79/2).
prim(p90/2).
prim(p105/2).
prim(p111/2).
prim(p127/2).
prim(p137/2).
prim(p143/2).
prim(p146/2).
prim(p178/2).
prim(p192/2).
prim(p200/2).
prim(p206/2).
prim(p218/2).
prim(p246/2).
prim(p254/2).
prim(p264/2).
prim(p267/2).
prim(p309/2).
prim(p340/2).
prim(p361/2).
prim(p368/2).
prim(p372/2).
prim(p382/2).
prim(p388/2).
prim(p396/2).
prim(p402/2).
prim(p407/2).
prim(p410/2).
prim(p413/2).
prim(p414/2).
prim(p414/2).
prim(p429/2).
prim(p429/2).
prim(p430/2).
prim(p433/2).
prim(p438/2).
prim(p443/2).
prim(p444/2).
prim(p469/2).
prim(p493/2).
prim(p511/2).
prim(p518/2).
prim(p523/2).
prim(p524/2).
prim(p524/2).
prim(p543/2).
prim(p550/2).
prim(p553/2).
prim(p554/2).
prim(p554/2).
prim(p562/2).
prim(p573/2).
prim(p57/2).
prim(p88/2).
prim(p464/2).
prim(p600/2).
prim(p5/2).
prim(p33/2).
prim(p35/2).
prim(p41/2).
prim(p56/2).
prim(p60/2).
prim(p73/2).
prim(p83/2).
prim(p85/2).
prim(p86/2).
prim(p89/2).
prim(p106/2).
prim(p115/2).
prim(p118/2).
prim(p171/2).
prim(p180/2).
prim(p197/2).
prim(p199/2).
prim(p225/2).
prim(p227/2).
prim(p228/2).
prim(p250/2).
prim(p258/2).
prim(p310/2).
prim(p321/2).
prim(p322/2).
prim(p323/2).
prim(p326/2).
prim(p329/2).
prim(p348/2).
prim(p355/2).
prim(p366/2).
prim(p389/2).
prim(p399/2).
prim(p421/2).
prim(p422/2).
prim(p441/2).
prim(p449/2).
prim(p453/2).
prim(p470/2).
prim(p470/2).
prim(p478/2).
prim(p479/2).
prim(p498/2).
prim(p499/2).
prim(p507/2).
prim(p522/2).
prim(p555/2).
prim(p586/2).
prim(p593/2).
prim(p113/2).
prim(p261/2).
prim(p353/2).
prim(p411/2).
prim(p8/2).
prim(p20/2).
prim(p39/2).
prim(p55/2).
prim(p97/2).
prim(p142/2).
prim(p158/2).
prim(p166/2).
prim(p201/2).
prim(p201/2).
prim(p213/2).
prim(p242/2).
prim(p290/2).
prim(p305/2).
prim(p315/2).
prim(p362/2).
prim(p376/2).
prim(p394/2).
prim(p395/2).
prim(p452/2).
prim(p460/2).
prim(p471/2).
prim(p505/2).
prim(p510/2).
prim(p525/2).
prim(p525/2).
prim(p541/2).
prim(p569/2).
prim(p588/2).
prim(p64/2).
prim(p117/2).
prim(p117/2).
prim(p196/2).
prim(p240/2).
prim(p405/2).
prim(p405/2).
prim(p480/2).
prim(p26/2).
prim(p34/2).
prim(p78/2).
prim(p103/2).
prim(p110/2).
prim(p121/2).
prim(p122/2).
prim(p202/2).
prim(p203/2).
prim(p232/2).
prim(p269/2).
prim(p409/2).
prim(p427/2).
prim(p457/2).
prim(p503/2).
prim(p508/2).
prim(p538/2).
prim(p540/2).
prim(p116/2).
prim(p163/2).
prim(p384/2).
prim(p520/2).
prim(p74/2).
prim(p74/2).
prim(p220/2).
prim(p220/2).
prim(p515/2).
prim(p515/2).
prim(p251/2).
prim(p251/2).
prim(p369/2).
prim(p369/2).
prim(p157/2).
prim(p157/2).

metarule(precon,[P/2,Q/1,R/2],([P,A,B]:-[[Q,A],[R,A,B]])).
metarule(postcon,[P/2,Q/2,R/1],([P,A,B]:-[[Q,A,B],[R,B]])).
metarule(chain,[P/2,Q/2,R/2],([P,A,B]:-[[Q,A,C],[R,C,B]])).
metarule(tailrec,[P/2,Q/2],([P,A,B]:-[[Q,A,C],[P,C,B]])).
%% metarule(curry3,[P/2,Q/3,C/0],([P,A,B]:-[[Q,A,B,C]])).

  
a:-
    cpus(CPU_COUNT),
    set_prolog_flag(cpu_count,CPU_COUNT),
    games(Games),
    playgol(Games),
    b,
    halt.

b:-
    cpus(CPU_COUNT),
    set_prolog_flag(cpu_count,CPU_COUNT),
    %get_time(T),
    %stamp_date_time(T, date(DY,DM,DD,TH,TM,TS,_,_,_), 'UTC'),
    %format('% started solving build tasks at ~w ~w ~w ~w:~w:~w\n', [DD, DM, DY, TH, TM, TS]),
    max_build_depth(BuildDepth),
    playgol:update_depth(BuildDepth),
    max_build_time(BuildTime),
    retractall(max_time(_)),
    assert(max_time(BuildTime)),
    tasks(Tasks),
    learn_tasks(Tasks,Progs),
    length(Progs,N),
    format('% num solved ~w\n',[N]),
    %get_time(T2),
    %stamp_date_time(T2, date(DY2,DM2,DD2,TH2,TM2,TS2,_,_,_), 'UTC'),
    %format('% finished solving build tasks at ~w ~w ~w ~w:~w:~w\n', [DD2, DM2, DY2, TH2, TM2, TS2]),
    halt.

learn_tasks(Tasks,Progs):-
    concurrent_maplist(learn_aux,Tasks,Xs),
    findall(true,member(true,Xs),Progs).

learn_aux(T,true):-
    train_examples(T,Pos,Neg),
    max_time(MaxTime),
    get_time(TTT),
    stamp_date_time(TTT, date(DY,DM,DD,TH,TM,TS,_,_,_), 'UTC'),
    format('% started solving build task at ~w ~w ~w ~w:~w:~w\n', [DD, DM, DY, TH, TM, TS]),
    catch(call_with_time_limit(MaxTime,learn(Pos,Neg,Prog)),time_limit_exceeded,(writeln('%timeout'),false)),!,
    get_time(TTT2),
    stamp_date_time(TTT2, date(DY2,DM2,DD2,TH2,TM2,TS2,_,_,_), 'UTC'),
    format('% finished solving build tasks at ~w ~w ~w ~w:~w:~w\n', [DD2, DM2, DY2, TH2, TM2, TS2]),
    pprint(Prog).
learn_aux(_,false).

do_test:-
    tasks(Tasks),
    maplist(do_test,Tasks),
    halt.

do_test(Task):-
    test_examples(Task,Pos),
    (current_predicate(Task/2) ->
        (
            format('%solved,~w,~w\n',[Task,1]),
            forall(member(X,Pos),(call(X) -> format('~w,~w\n',[1,1]); format('~w,~w\n',[1,0])))
        );
        (
            format('%solved,~w,~w\n',[Task,0]),
            forall(member(_,Pos),format('~w,~w\n',[0,0]))
        )).

gen_e(Task,Input,Output,Out):-
    Out=..[Task,s(Input,Output),s(_,[])].

play_examples(Task,Pos,[]):-
    findall(X,(play_pos(Task,A,B),gen_e(Task,A,B,X)),Pos1),
    sort_examples(Pos1,Pos).

train_examples(Task,Pos,[]):-
    findall(X,(build_pos(Task,A,B),gen_e(Task,A,B,X)),Pos1),
    sort_examples(Pos1,Pos).

test_examples(Task,Pos):-
    findall(X,(test_pos(Task,A,B),gen_e(Task,A,B,X)),Pos).

add_len(Atom,Len-Atom):-
    Atom=..[_Task,s(Input,_Output),s(_,[])],
    length(Input,Len).
remove_len(_-Atom,Atom).

sort_examples(L1,L2):-
  maplist(add_len,L1,L3),
  keysort(L3,L4),
  maplist(remove_len,L4,L2).

