
:-['../playgol'].
:-['string-bk'].
:-['../metagol'].

:-['./programs_pncorrect/literals2-3_layerNone_time5400s_pruneTrue_altFalse_rcandsTrue_rrTrue_mrTrue_singlTrue/refactored_primitives-600-5.pl'].



:- use_module(library(time)).

play_time_interval(2).
max_build_time(60).
max_play_depth(4).
max_build_depth(5).
cpus(4).

metagol:functional.
%% metagol:max_clauses(10).

func_test([P,s(In,Out1),s(_,[])],PS,G):-
  \+ (metagol :prove_deduce([[P,s(In,Out2),s(_,[])]],PS,G),Out1\= Out2).



%% tell metagol to use the BK
prim(is_empty/1).
prim(not_empty/1). % maybe?

prim(is_space/1).
prim(not_space/1). % maybe?

prim(is_uppercase/1).
prim(is_lowercase/1).

prim(is_letter/1).
prim(not_letter/1).

prim(is_number/1).
prim(not_number/1).

prim(copy1/2).
prim(skip1/2).
prim(mk_uppercase/2).
prim(mk_lowercase/2).
%% prim(write1/3).

prim(latent1306_3/2).
prim(latent46_3/2).
prim(latent1363_3/2).
prim(latent4_2/2).
prim(latent137_2/2).
prim(latent689_2/2).
prim(latent543_2/2).
prim(latent790_2/2).
prim(latent186_2/2).
prim(latent909_2/2).
prim(latent508_2/2).
prim(latent1471_3/2).
prim(latent130_2/2).
prim(latent278_2/2).
prim(latent303_2/2).
prim(latent219_2/2).
prim(latent348_2/2).
prim(latent1333_3/2).
prim(latent1744_2/2).
prim(latent1016_3/2).
prim(latent115_2/2).
prim(latent83_2/2).
prim(latent1477_3/2).
prim(latent182_2/2).
prim(latent36_3/2).
prim(latent24_3/2).
prim(latent190_2/2).
prim(latent29_3/2).
prim(latent1100_3/2).
prim(latent289_2/2).
prim(latent172_2/2).
prim(latent362_2/2).
prim(latent796_2/2).
prim(latent598_2/2).
prim(latent21_2/2).
prim(latent1775_2/2).
prim(latent155_2/2).
prim(latent257_2/2).
prim(latent1199_3/2).
prim(latent124_2/2).
prim(latent1801_2/2).
prim(latent53_2/2).
prim(latent38_3/2).
prim(latent14_2/2).
prim(latent1278_3/2).
prim(latent178_2/2).
prim(latent913_3/2).
prim(latent1264_3/2).
prim(latent1448_2/2).
prim(latent140_2/2).
prim(latent324_2/2).
prim(latent1030_3/2).
prim(latent1111_3/2).
prim(latent5/2).
prim(latent1052_3/2).
prim(latent42_3/2).
prim(latent133_2/2).
prim(latent39_3/2).
prim(latent6_2/2).
prim(latent8_2/2).
prim(latent1011_3/2).
prim(latent476_2/2).
prim(latent1106_2/2).
prim(latent326_2/2).
prim(latent335_2/2).
prim(latent13_2/2).
prim(latent135_2/2).
prim(latent315_2/2).
prim(latent151_2/2).
prim(latent493_2/2).
prim(latent1147_3/2).
prim(latent1527_3/2).
prim(latent774_2/2).
prim(latent1283_3/2).
prim(latent314_2/2).
prim(latent1185_3/2).
prim(latent265_2/2).
prim(latent61_3/2).
prim(latent91_2/2).
prim(latent33_3/2).
prim(latent43_3/2).
prim(latent1243_3/2).
prim(latent1189_3/2).
prim(latent1/2).
prim(latent1058_2/2).
prim(latent950_3/2).
prim(latent307_2/2).
prim(latent505_2/2).
prim(latent28_3/2).
prim(latent3_2/2).
prim(latent65_2/2).
prim(latent618_2/2).
prim(latent1731_2/2).
prim(latent27_3/2).
prim(latent1134_3/2).
prim(latent22_3/2).
prim(latent260_2/2).
prim(latent345_2/2).
prim(latent1007_3/2).
prim(latent334_2/2).
prim(latent23_3/2).
prim(latent279_2/2).
prim(latent477_3/2).
prim(latent357_2/2).
prim(latent467_3/2).
prim(latent217_2/2).
prim(latent1196_3/2).
prim(latent12/2).
prim(latent122_2/2).
prim(latent100/2).
prim(latent144_2/2).
prim(latent786_2/2).
prim(latent1170_3/2).
prim(latent1525_3/2).
prim(latent1226_3/2).
prim(latent15_2/2).
prim(latent1176_3/2).
prim(latent1347_3/2).
prim(latent1437_3/2).
prim(latent150_2/2).
prim(latent439_2/2).
prim(latent1410_3/2).
prim(latent1175_3/2).
prim(latent143_2/2).
prim(latent119_2/2).
prim(latent1218_3/2).
prim(latent1003_2/2).
prim(latent19_3/2).
prim(latent1614_3/2).
prim(latent1214_3/2).
prim(latent1236_3/2).
prim(latent960_3/2).
prim(latent10_2/2).
prim(latent72_3/2).
prim(latent66/2).
prim(latent817_2/2).
prim(latent59_3/2).
prim(latent98_2/2).
prim(latent465_2/2).
prim(latent116_2/2).
prim(latent95_2/2).
prim(latent1447_3/2).
prim(latent114_2/2).
prim(latent163_2/2).
prim(latent40_3/2).
prim(latent1711_3/2).
prim(latent30_3/2).
prim(latent228_2/2).
prim(latent1067_3/2).
prim(latent1075_3/2).
prim(latent301_2/2).
prim(latent108/2).
prim(latent1061_3/2).
prim(latent671_2/2).
prim(latent1021_3/2).
prim(latent298_2/2).
prim(latent235_2/2).
prim(latent25_2/2).
prim(latent2/2).
prim(latent128_2/2).
prim(latent118_3/2).
prim(latent1242_2/2).
prim(latent121_2/2).
prim(latent329_2/2).
prim(latent1327_3/2).
prim(latent562_2/2).
prim(latent366_3/2).
prim(latent170_2/2).
prim(latent1387_3/2).
prim(latent9_2/2).
prim(latent1554_3/2).
prim(latent897_2/2).
prim(latent78/2).
prim(latent1913_2/2).
prim(latent123_2/2).
prim(latent136_2/2).
prim(latent197_2/2).
prim(latent35_3/2).
prim(latent18_3/2).
prim(latent807_3/2).
prim(latent17_3/2).
prim(latent7_2/2).
prim(latent1252_3/2).
prim(latent41_3/2).
prim(latent678_2/2).
prim(latent20_3/2).
prim(latent26_3/2).
prim(latent32_3/2).
prim(latent198_2/2).
prim(latent11_2/2).
prim(latent270_2/2).
prim(latent75_3/2).
prim(latent344_2/2).
prim(latent718_2/2).
prim(latent317_2/2).
prim(latent16_2/2).
prim(latent1163_3/2).
prim(latent31_2/2).
prim(latent34_3/2).
prim(latent1876_2/2).
prim(latent37_3/2).
prim(latent1940_2/2).
prim(p1/2).
prim(p6/2).
prim(p7/2).
prim(p8/2).
prim(p14/2).
prim(p35/2).
prim(p36/2).
prim(p62/2).
prim(p107/2).
prim(p111/2).
prim(p120/2).
prim(p127/2).
prim(p169/2).
prim(p233/2).
prim(p377/2).
prim(p460/2).
prim(p12/2).
prim(p32/2).
prim(p33/2).
prim(p34/2).
prim(p39/2).
prim(p48/2).
prim(p76/2).
prim(p87/2).
prim(p119/2).
prim(p122/2).
prim(p139/2).
prim(p167/2).
prim(p171/2).
prim(p183/2).
prim(p251/2).
prim(p264/2).
prim(p288/2).
prim(p291/2).
prim(p322/2).
prim(p423/2).
prim(p441/2).
prim(p443/2).
prim(p463/2).
prim(p513/2).
prim(p25/2).
prim(p26/2).
prim(p29/2).
prim(p31/2).
prim(p42/2).
prim(p47/2).
prim(p49/2).
prim(p64/2).
prim(p65/2).
prim(p96/2).
prim(p99/2).
prim(p123/2).
prim(p147/2).
prim(p156/2).
prim(p163/2).
prim(p187/2).
prim(p214/2).
prim(p236/2).
prim(p262/2).
prim(p268/2).
prim(p270/2).
prim(p281/2).
prim(p314/2).
prim(p373/2).
prim(p385/2).
prim(p417/2).
prim(p419/2).
prim(p444/2).
prim(p447/2).
prim(p473/2).
prim(p496/2).
prim(p509/2).
prim(p511/2).
prim(p518/2).
prim(p189/2).
prim(p53/2).
prim(p56/2).
prim(p59/2).
prim(p60/2).
prim(p72/2).
prim(p105/2).
prim(p124/2).
prim(p129/2).
prim(p151/2).
prim(p160/2).
prim(p162/2).
prim(p164/2).
prim(p165/2).
prim(p166/2).
prim(p179/2).
prim(p193/2).
prim(p200/2).
prim(p216/2).
prim(p235/2).
prim(p248/2).
prim(p282/2).
prim(p297/2).
prim(p317/2).
prim(p317/2).
prim(p319/2).
prim(p326/2).
prim(p326/2).
prim(p328/2).
prim(p342/2).
prim(p342/2).
prim(p346/2).
prim(p384/2).
prim(p395/2).
prim(p426/2).
prim(p426/2).
prim(p440/2).
prim(p449/2).
prim(p451/2).
prim(p451/2).
prim(p453/2).
prim(p458/2).
prim(p470/2).
prim(p478/2).
prim(p494/2).
prim(p494/2).
prim(p521/2).
prim(p521/2).
prim(p536/2).
prim(p560/2).
prim(p19/2).
prim(p265/2).
prim(p401/2).
prim(p421/2).
prim(p467/2).
prim(p489/2).
prim(p561/2).
prim(p579/2).
prim(p75/2).
prim(p140/2).
prim(p140/2).
prim(p154/2).
prim(p154/2).
prim(p174/2).
prim(p174/2).
prim(p175/2).
prim(p175/2).
prim(p209/2).
prim(p217/2).
prim(p217/2).
prim(p231/2).
prim(p263/2).
prim(p290/2).
prim(p290/2).
prim(p320/2).
prim(p324/2).
prim(p393/2).
prim(p393/2).
prim(p450/2).
prim(p539/2).
prim(p539/2).
prim(p573/2).
prim(p573/2).
prim(p20/2).
prim(p37/2).
prim(p43/2).
prim(p43/2).
prim(p45/2).
prim(p52/2).
prim(p58/2).
prim(p58/2).
prim(p73/2).
prim(p91/2).
prim(p93/2).
prim(p110/2).
prim(p110/2).
prim(p116/2).
prim(p138/2).
prim(p138/2).
prim(p184/2).
prim(p191/2).
prim(p199/2).
prim(p203/2).
prim(p203/2).
prim(p210/2).
prim(p287/2).
prim(p304/2).
prim(p304/2).
prim(p332/2).
prim(p337/2).
prim(p372/2).
prim(p381/2).
prim(p396/2).
prim(p409/2).
prim(p409/2).
prim(p455/2).
prim(p487/2).
prim(p508/2).
prim(p529/2).
prim(p529/2).
prim(p541/2).
prim(p551/2).
prim(p551/2).
prim(p566/2).
prim(p571/2).
prim(p581/2).
prim(p2/2).
prim(p84/2).
prim(p95/2).
prim(p102/2).
prim(p222/2).
prim(p224/2).
prim(p238/2).
prim(p241/2).
prim(p275/2).
prim(p278/2).
prim(p286/2).
prim(p298/2).
prim(p367/2).
prim(p370/2).
prim(p415/2).
prim(p483/2).
prim(p530/2).
prim(p555/2).
prim(p5/2).
prim(p5/2).
prim(p316/2).
prim(p543/2).
prim(p4/2).
prim(p17/2).
prim(p21/2).
prim(p22/2).
prim(p40/2).
prim(p51/2).
prim(p51/2).
prim(p71/2).
prim(p83/2).
prim(p83/2).
prim(p88/2).
prim(p90/2).
prim(p90/2).
prim(p104/2).
prim(p112/2).
prim(p114/2).
prim(p121/2).
prim(p121/2).
prim(p125/2).
prim(p135/2).
prim(p142/2).
prim(p142/2).
prim(p172/2).
prim(p176/2).
prim(p176/2).
prim(p188/2).
prim(p190/2).
prim(p207/2).
prim(p218/2).
prim(p220/2).
prim(p227/2).
prim(p228/2).
prim(p228/2).
prim(p240/2).
prim(p249/2).
prim(p256/2).
prim(p256/2).
prim(p259/2).
prim(p261/2).
prim(p272/2).
prim(p283/2).
prim(p289/2).
prim(p294/2).
prim(p307/2).
prim(p308/2).
prim(p311/2).
prim(p331/2).
prim(p341/2).
prim(p353/2).
prim(p368/2).
prim(p378/2).
prim(p388/2).
prim(p399/2).
prim(p404/2).
prim(p418/2).
prim(p420/2).
prim(p420/2).
prim(p433/2).
prim(p442/2).
prim(p442/2).
prim(p462/2).
prim(p472/2).
prim(p510/2).
prim(p520/2).
prim(p549/2).
prim(p563/2).
prim(p563/2).
prim(p570/2).
prim(p575/2).
prim(p577/2).
prim(p577/2).
prim(p586/2).
prim(p589/2).
prim(p596/2).
prim(p11/2).
prim(p11/2).
prim(p11/2).
prim(p13/2).
prim(p38/2).
prim(p46/2).
prim(p46/2).
prim(p55/2).
prim(p86/2).
prim(p86/2).
prim(p89/2).
prim(p92/2).
prim(p130/2).
prim(p132/2).
prim(p136/2).
prim(p150/2).
prim(p180/2).
prim(p205/2).
prim(p269/2).
prim(p285/2).
prim(p300/2).
prim(p303/2).
prim(p313/2).
prim(p329/2).
prim(p339/2).
prim(p354/2).
prim(p360/2).
prim(p362/2).
prim(p389/2).
prim(p392/2).
prim(p398/2).
prim(p408/2).
prim(p411/2).
prim(p430/2).
prim(p456/2).
prim(p475/2).
prim(p492/2).
prim(p492/2).
prim(p517/2).
prim(p523/2).
prim(p523/2).
prim(p540/2).
prim(p542/2).
prim(p544/2).
prim(p546/2).
prim(p550/2).
prim(p557/2).
prim(p558/2).
prim(p576/2).
prim(p593/2).
prim(p595/2).
prim(p15/2).
prim(p18/2).
prim(p23/2).
prim(p28/2).
prim(p68/2).
prim(p79/2).
prim(p82/2).
prim(p82/2).
prim(p85/2).
prim(p98/2).
prim(p101/2).
prim(p133/2).
prim(p242/2).
prim(p243/2).
prim(p250/2).
prim(p266/2).
prim(p267/2).
prim(p306/2).
prim(p315/2).
prim(p338/2).
prim(p347/2).
prim(p383/2).
prim(p400/2).
prim(p436/2).
prim(p512/2).
prim(p569/2).
prim(p580/2).
prim(p146/2).
prim(p293/2).
prim(p545/2).
prim(p211/2).
prim(p211/2).
prim(p252/2).
prim(p252/2).
prim(p229/2).
prim(p229/2).
prim(p397/2).
prim(p397/2).
prim(p403/2).
prim(p403/2).
prim(p149/2).
prim(p149/2).
prim(p446/2).
prim(p446/2).

metarule(precon,[P/2,Q/1,R/2],([P,A,B]:-[[Q,A],[R,A,B]])).
metarule(postcon,[P/2,Q/2,R/1],([P,A,B]:-[[Q,A,B],[R,B]])).
metarule(chain,[P/2,Q/2,R/2],([P,A,B]:-[[Q,A,C],[R,C,B]])).
metarule(tailrec,[P/2,Q/2],([P,A,B]:-[[Q,A,C],[P,C,B]])).
%% metarule(curry3,[P/2,Q/3,C/0],([P,A,B]:-[[Q,A,B,C]])).

  
a:-
    cpus(CPU_COUNT),
    set_prolog_flag(cpu_count,CPU_COUNT),
    games(Games),
    playgol(Games),
    b,
    halt.

b:-
    cpus(CPU_COUNT),
    set_prolog_flag(cpu_count,CPU_COUNT),
    %get_time(T),
    %stamp_date_time(T, date(DY,DM,DD,TH,TM,TS,_,_,_), 'UTC'),
    %format('% started solving build tasks at ~w ~w ~w ~w:~w:~w\n', [DD, DM, DY, TH, TM, TS]),
    max_build_depth(BuildDepth),
    playgol:update_depth(BuildDepth),
    max_build_time(BuildTime),
    retractall(max_time(_)),
    assert(max_time(BuildTime)),
    tasks(Tasks),
    learn_tasks(Tasks,Progs),
    length(Progs,N),
    format('% num solved ~w\n',[N]),
    %get_time(T2),
    %stamp_date_time(T2, date(DY2,DM2,DD2,TH2,TM2,TS2,_,_,_), 'UTC'),
    %format('% finished solving build tasks at ~w ~w ~w ~w:~w:~w\n', [DD2, DM2, DY2, TH2, TM2, TS2]),
    halt.

learn_tasks(Tasks,Progs):-
    concurrent_maplist(learn_aux,Tasks,Xs),
    findall(true,member(true,Xs),Progs).

learn_aux(T,true):-
    train_examples(T,Pos,Neg),
    max_time(MaxTime),
    get_time(TTT),
    stamp_date_time(TTT, date(DY,DM,DD,TH,TM,TS,_,_,_), 'UTC'),
    format('% started solving build task at ~w ~w ~w ~w:~w:~w\n', [DD, DM, DY, TH, TM, TS]),
    catch(call_with_time_limit(MaxTime,learn(Pos,Neg,Prog)),time_limit_exceeded,(writeln('%timeout'),false)),!,
    get_time(TTT2),
    stamp_date_time(TTT2, date(DY2,DM2,DD2,TH2,TM2,TS2,_,_,_), 'UTC'),
    format('% finished solving build tasks at ~w ~w ~w ~w:~w:~w\n', [DD2, DM2, DY2, TH2, TM2, TS2]),
    pprint(Prog).
learn_aux(_,false).

do_test:-
    tasks(Tasks),
    maplist(do_test,Tasks),
    halt.

do_test(Task):-
    test_examples(Task,Pos),
    (current_predicate(Task/2) ->
        (
            format('%solved,~w,~w\n',[Task,1]),
            forall(member(X,Pos),(call(X) -> format('~w,~w\n',[1,1]); format('~w,~w\n',[1,0])))
        );
        (
            format('%solved,~w,~w\n',[Task,0]),
            forall(member(_,Pos),format('~w,~w\n',[0,0]))
        )).

gen_e(Task,Input,Output,Out):-
    Out=..[Task,s(Input,Output),s(_,[])].

play_examples(Task,Pos,[]):-
    findall(X,(play_pos(Task,A,B),gen_e(Task,A,B,X)),Pos1),
    sort_examples(Pos1,Pos).

train_examples(Task,Pos,[]):-
    findall(X,(build_pos(Task,A,B),gen_e(Task,A,B,X)),Pos1),
    sort_examples(Pos1,Pos).

test_examples(Task,Pos):-
    findall(X,(test_pos(Task,A,B),gen_e(Task,A,B,X)),Pos).

add_len(Atom,Len-Atom):-
    Atom=..[_Task,s(Input,_Output),s(_,[])],
    length(Input,Len).
remove_len(_-Atom,Atom).

sort_examples(L1,L2):-
  maplist(add_len,L1,L3),
  keysort(L3,L4),
  maplist(remove_len,L4,L2).

