
:-['../playgol'].
:-['string-bk'].
:-['../metagol'].

:-['./programs_pncorrect/literals2-3_layerNone_time5400s_pruneTrue_altFalse_rcandsTrue_rrTrue_mrTrue_singlTrue/refactored_primitives-400-10.pl'].



:- use_module(library(time)).

play_time_interval(2).
max_build_time(60).
max_play_depth(4).
max_build_depth(5).
cpus(4).

metagol:functional.
%% metagol:max_clauses(10).

func_test([P,s(In,Out1),s(_,[])],PS,G):-
  \+ (metagol :prove_deduce([[P,s(In,Out2),s(_,[])]],PS,G),Out1\= Out2).



%% tell metagol to use the BK
prim(is_empty/1).
prim(not_empty/1). % maybe?

prim(is_space/1).
prim(not_space/1). % maybe?

prim(is_uppercase/1).
prim(is_lowercase/1).

prim(is_letter/1).
prim(not_letter/1).

prim(is_number/1).
prim(not_number/1).

prim(copy1/2).
prim(skip1/2).
prim(mk_uppercase/2).
prim(mk_lowercase/2).
%% prim(write1/3).

prim(latent166_2/2).
prim(latent103_2/2).
prim(latent1154_2/2).
prim(latent273_2/2).
prim(latent242_2/2).
prim(latent701_3/2).
prim(latent719_2/2).
prim(latent26_3/2).
prim(latent15_3/2).
prim(latent538_2/2).
prim(latent727_3/2).
prim(latent12_2/2).
prim(latent18_3/2).
prim(latent1447_3/2).
prim(latent1/2).
prim(latent270_2/2).
prim(latent42_3/2).
prim(latent16_3/2).
prim(latent765_2/2).
prim(latent202_2/2).
prim(latent43_3/2).
prim(latent822_2/2).
prim(latent100_2/2).
prim(latent260_2/2).
prim(latent32_2/2).
prim(latent1178_2/2).
prim(latent252_2/2).
prim(latent254_2/2).
prim(latent46_3/2).
prim(latent576_2/2).
prim(latent281_2/2).
prim(latent416_2/2).
prim(latent879_3/2).
prim(latent21_3/2).
prim(latent106_2/2).
prim(latent181_2/2).
prim(latent25_3/2).
prim(latent825_3/2).
prim(latent547_2/2).
prim(latent6/2).
prim(latent617_3/2).
prim(latent1258_3/2).
prim(latent834_3/2).
prim(latent126_2/2).
prim(latent1365_2/2).
prim(latent1011_3/2).
prim(latent1338_3/2).
prim(latent744_3/2).
prim(latent587_2/2).
prim(latent341_2/2).
prim(latent554_2/2).
prim(latent147_2/2).
prim(latent391_2/2).
prim(latent1156_3/2).
prim(latent116_2/2).
prim(latent733_3/2).
prim(latent755_3/2).
prim(latent192_2/2).
prim(latent140_2/2).
prim(latent20_3/2).
prim(latent238_2/2).
prim(latent753_2/2).
prim(latent118_2/2).
prim(latent320_2/2).
prim(latent761_3/2).
prim(latent78_2/2).
prim(latent1323_3/2).
prim(latent30_3/2).
prim(latent3_2/2).
prim(latent27_2/2).
prim(latent347_2/2).
prim(latent7_2/2).
prim(latent98/2).
prim(latent507_2/2).
prim(latent1376_2/2).
prim(latent429_2/2).
prim(latent261_2/2).
prim(latent206_2/2).
prim(latent1553_3/2).
prim(latent9_2/2).
prim(latent367_2/2).
prim(latent81_2/2).
prim(latent1313_3/2).
prim(latent885_3/2).
prim(latent2/2).
prim(latent35_3/2).
prim(latent1078_2/2).
prim(latent665_2/2).
prim(latent33_3/2).
prim(latent217_2/2).
prim(latent134_2/2).
prim(latent738_3/2).
prim(latent535_2/2).
prim(latent28_3/2).
prim(latent276_2/2).
prim(latent19_3/2).
prim(latent264_2/2).
prim(latent1522_3/2).
prim(latent793_3/2).
prim(latent490_2/2).
prim(latent101_2/2).
prim(latent107_2/2).
prim(latent23_2/2).
prim(latent114_2/2).
prim(latent1055_2/2).
prim(latent17_2/2).
prim(latent120_2/2).
prim(latent8_2/2).
prim(latent121_2/2).
prim(latent363_2/2).
prim(latent45_2/2).
prim(latent172_2/2).
prim(latent222_2/2).
prim(latent818_3/2).
prim(latent195_2/2).
prim(latent247_3/2).
prim(latent5/2).
prim(latent1094_2/2).
prim(latent421_3/2).
prim(latent37_3/2).
prim(latent815_3/2).
prim(latent111_2/2).
prim(latent57_2/2).
prim(latent14_3/2).
prim(latent71_2/2).
prim(latent1284_2/2).
prim(latent491_2/2).
prim(latent1031_2/2).
prim(latent248_2/2).
prim(latent1511_3/2).
prim(latent49_2/2).
prim(latent221_2/2).
prim(latent748_3/2).
prim(latent4_2/2).
prim(latent36_3/2).
prim(latent228_2/2).
prim(latent675_3/2).
prim(latent1248_2/2).
prim(latent29_2/2).
prim(latent265_2/2).
prim(latent41_3/2).
prim(latent31_3/2).
prim(latent158_2/2).
prim(latent944_2/2).
prim(latent135_2/2).
prim(latent109_2/2).
prim(latent839_3/2).
prim(latent177_2/2).
prim(latent70_3/2).
prim(latent861_3/2).
prim(latent11_2/2).
prim(latent768_3/2).
prim(latent871_3/2).
prim(latent34_3/2).
prim(latent97_2/2).
prim(latent516_2/2).
prim(latent235_3/2).
prim(latent1406_3/2).
prim(latent773_3/2).
prim(latent723_3/2).
prim(latent77_3/2).
prim(latent966_3/2).
prim(latent1505_3/2).
prim(latent22_3/2).
prim(latent244_3/2).
prim(latent314_2/2).
prim(latent287_2/2).
prim(latent13_2/2).
prim(latent340_2/2).
prim(latent782_3/2).
prim(latent401_2/2).
prim(latent691_3/2).
prim(latent10_2/2).
prim(latent24_3/2).
prim(latent102_2/2).
prim(p1/2).
prim(p13/2).
prim(p21/2).
prim(p30/2).
prim(p39/2).
prim(p50/2).
prim(p68/2).
prim(p113/2).
prim(p126/2).
prim(p149/2).
prim(p175/2).
prim(p182/2).
prim(p315/2).
prim(p2/2).
prim(p5/2).
prim(p7/2).
prim(p8/2).
prim(p24/2).
prim(p35/2).
prim(p59/2).
prim(p67/2).
prim(p91/2).
prim(p140/2).
prim(p150/2).
prim(p198/2).
prim(p220/2).
prim(p224/2).
prim(p273/2).
prim(p303/2).
prim(p319/2).
prim(p377/2).
prim(p382/2).
prim(p9/2).
prim(p10/2).
prim(p11/2).
prim(p26/2).
prim(p28/2).
prim(p36/2).
prim(p40/2).
prim(p45/2).
prim(p49/2).
prim(p62/2).
prim(p169/2).
prim(p177/2).
prim(p187/2).
prim(p204/2).
prim(p211/2).
prim(p233/2).
prim(p243/2).
prim(p281/2).
prim(p288/2).
prim(p293/2).
prim(p328/2).
prim(p329/2).
prim(p339/2).
prim(p342/2).
prim(p347/2).
prim(p348/2).
prim(p351/2).
prim(p353/2).
prim(p375/2).
prim(p393/2).
prim(p265/2).
prim(p20/2).
prim(p29/2).
prim(p46/2).
prim(p54/2).
prim(p69/2).
prim(p69/2).
prim(p88/2).
prim(p94/2).
prim(p95/2).
prim(p104/2).
prim(p106/2).
prim(p117/2).
prim(p155/2).
prim(p161/2).
prim(p180/2).
prim(p180/2).
prim(p181/2).
prim(p213/2).
prim(p250/2).
prim(p250/2).
prim(p252/2).
prim(p262/2).
prim(p302/2).
prim(p318/2).
prim(p345/2).
prim(p356/2).
prim(p63/2).
prim(p76/2).
prim(p99/2).
prim(p166/2).
prim(p192/2).
prim(p261/2).
prim(p307/2).
prim(p321/2).
prim(p383/2).
prim(p34/2).
prim(p71/2).
prim(p86/2).
prim(p119/2).
prim(p120/2).
prim(p176/2).
prim(p195/2).
prim(p228/2).
prim(p267/2).
prim(p276/2).
prim(p282/2).
prim(p317/2).
prim(p331/2).
prim(p369/2).
prim(p369/2).
prim(p386/2).
prim(p22/2).
prim(p48/2).
prim(p52/2).
prim(p60/2).
prim(p80/2).
prim(p90/2).
prim(p97/2).
prim(p129/2).
prim(p136/2).
prim(p145/2).
prim(p170/2).
prim(p193/2).
prim(p193/2).
prim(p245/2).
prim(p247/2).
prim(p254/2).
prim(p270/2).
prim(p310/2).
prim(p370/2).
prim(p202/2).
prim(p3/2).
prim(p51/2).
prim(p61/2).
prim(p64/2).
prim(p66/2).
prim(p77/2).
prim(p108/2).
prim(p121/2).
prim(p138/2).
prim(p143/2).
prim(p148/2).
prim(p173/2).
prim(p174/2).
prim(p189/2).
prim(p200/2).
prim(p229/2).
prim(p249/2).
prim(p256/2).
prim(p260/2).
prim(p296/2).
prim(p378/2).
prim(p389/2).
prim(p18/2).
prim(p18/2).
prim(p70/2).
prim(p4/2).
prim(p6/2).
prim(p14/2).
prim(p23/2).
prim(p27/2).
prim(p42/2).
prim(p79/2).
prim(p82/2).
prim(p93/2).
prim(p105/2).
prim(p110/2).
prim(p112/2).
prim(p127/2).
prim(p132/2).
prim(p134/2).
prim(p141/2).
prim(p144/2).
prim(p167/2).
prim(p168/2).
prim(p190/2).
prim(p209/2).
prim(p212/2).
prim(p223/2).
prim(p240/2).
prim(p266/2).
prim(p269/2).
prim(p274/2).
prim(p278/2).
prim(p285/2).
prim(p299/2).
prim(p306/2).
prim(p314/2).
prim(p336/2).
prim(p357/2).
prim(p360/2).
prim(p178/2).
prim(p15/2).
prim(p17/2).
prim(p19/2).
prim(p55/2).
prim(p78/2).
prim(p128/2).
prim(p131/2).
prim(p219/2).
prim(p226/2).
prim(p300/2).
prim(p330/2).
prim(p343/2).
prim(p395/2).
prim(p399/2).
prim(p135/2).
prim(p197/2).
prim(p346/2).
prim(p16/2).
prim(p33/2).
prim(p41/2).
prim(p56/2).
prim(p58/2).
prim(p65/2).
prim(p87/2).
prim(p89/2).
prim(p102/2).
prim(p107/2).
prim(p114/2).
prim(p123/2).
prim(p133/2).
prim(p147/2).
prim(p151/2).
prim(p153/2).
prim(p158/2).
prim(p164/2).
prim(p185/2).
prim(p186/2).
prim(p191/2).
prim(p208/2).
prim(p225/2).
prim(p232/2).
prim(p234/2).
prim(p236/2).
prim(p239/2).
prim(p253/2).
prim(p264/2).
prim(p316/2).
prim(p325/2).
prim(p337/2).
prim(p338/2).
prim(p340/2).
prim(p366/2).
prim(p376/2).
prim(p391/2).
prim(p297/2).
prim(p322/2).
prim(p320/2).
prim(p32/2).
prim(p32/2).
prim(p146/2).
prim(p146/2).

metarule(precon,[P/2,Q/1,R/2],([P,A,B]:-[[Q,A],[R,A,B]])).
metarule(postcon,[P/2,Q/2,R/1],([P,A,B]:-[[Q,A,B],[R,B]])).
metarule(chain,[P/2,Q/2,R/2],([P,A,B]:-[[Q,A,C],[R,C,B]])).
metarule(tailrec,[P/2,Q/2],([P,A,B]:-[[Q,A,C],[P,C,B]])).
%% metarule(curry3,[P/2,Q/3,C/0],([P,A,B]:-[[Q,A,B,C]])).

  
a:-
    cpus(CPU_COUNT),
    set_prolog_flag(cpu_count,CPU_COUNT),
    games(Games),
    playgol(Games),
    b,
    halt.

b:-
    cpus(CPU_COUNT),
    set_prolog_flag(cpu_count,CPU_COUNT),
    %get_time(T),
    %stamp_date_time(T, date(DY,DM,DD,TH,TM,TS,_,_,_), 'UTC'),
    %format('% started solving build tasks at ~w ~w ~w ~w:~w:~w\n', [DD, DM, DY, TH, TM, TS]),
    max_build_depth(BuildDepth),
    playgol:update_depth(BuildDepth),
    max_build_time(BuildTime),
    retractall(max_time(_)),
    assert(max_time(BuildTime)),
    tasks(Tasks),
    learn_tasks(Tasks,Progs),
    length(Progs,N),
    format('% num solved ~w\n',[N]),
    %get_time(T2),
    %stamp_date_time(T2, date(DY2,DM2,DD2,TH2,TM2,TS2,_,_,_), 'UTC'),
    %format('% finished solving build tasks at ~w ~w ~w ~w:~w:~w\n', [DD2, DM2, DY2, TH2, TM2, TS2]),
    halt.

learn_tasks(Tasks,Progs):-
    concurrent_maplist(learn_aux,Tasks,Xs),
    findall(true,member(true,Xs),Progs).

learn_aux(T,true):-
    train_examples(T,Pos,Neg),
    max_time(MaxTime),
    get_time(TTT),
    stamp_date_time(TTT, date(DY,DM,DD,TH,TM,TS,_,_,_), 'UTC'),
    format('% started solving build task at ~w ~w ~w ~w:~w:~w\n', [DD, DM, DY, TH, TM, TS]),
    catch(call_with_time_limit(MaxTime,learn(Pos,Neg,Prog)),time_limit_exceeded,(writeln('%timeout'),false)),!,
    get_time(TTT2),
    stamp_date_time(TTT2, date(DY2,DM2,DD2,TH2,TM2,TS2,_,_,_), 'UTC'),
    format('% finished solving build tasks at ~w ~w ~w ~w:~w:~w\n', [DD2, DM2, DY2, TH2, TM2, TS2]),
    pprint(Prog).
learn_aux(_,false).

do_test:-
    tasks(Tasks),
    maplist(do_test,Tasks),
    halt.

do_test(Task):-
    test_examples(Task,Pos),
    (current_predicate(Task/2) ->
        (
            format('%solved,~w,~w\n',[Task,1]),
            forall(member(X,Pos),(call(X) -> format('~w,~w\n',[1,1]); format('~w,~w\n',[1,0])))
        );
        (
            format('%solved,~w,~w\n',[Task,0]),
            forall(member(_,Pos),format('~w,~w\n',[0,0]))
        )).

gen_e(Task,Input,Output,Out):-
    Out=..[Task,s(Input,Output),s(_,[])].

play_examples(Task,Pos,[]):-
    findall(X,(play_pos(Task,A,B),gen_e(Task,A,B,X)),Pos1),
    sort_examples(Pos1,Pos).

train_examples(Task,Pos,[]):-
    findall(X,(build_pos(Task,A,B),gen_e(Task,A,B,X)),Pos1),
    sort_examples(Pos1,Pos).

test_examples(Task,Pos):-
    findall(X,(test_pos(Task,A,B),gen_e(Task,A,B,X)),Pos).

add_len(Atom,Len-Atom):-
    Atom=..[_Task,s(Input,_Output),s(_,[])],
    length(Input,Len).
remove_len(_-Atom,Atom).

sort_examples(L1,L2):-
  maplist(add_len,L1,L3),
  keysort(L3,L4),
  maplist(remove_len,L4,L2).

