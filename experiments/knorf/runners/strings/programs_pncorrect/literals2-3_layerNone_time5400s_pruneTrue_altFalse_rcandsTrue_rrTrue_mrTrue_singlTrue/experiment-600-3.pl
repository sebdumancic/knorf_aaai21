
:-['../playgol'].
:-['string-bk'].
:-['../metagol'].

:-['./programs_pncorrect/literals2-3_layerNone_time5400s_pruneTrue_altFalse_rcandsTrue_rrTrue_mrTrue_singlTrue/refactored_primitives-600-3.pl'].



:- use_module(library(time)).

play_time_interval(2).
max_build_time(60).
max_play_depth(4).
max_build_depth(5).
cpus(4).

metagol:functional.
%% metagol:max_clauses(10).

func_test([P,s(In,Out1),s(_,[])],PS,G):-
  \+ (metagol :prove_deduce([[P,s(In,Out2),s(_,[])]],PS,G),Out1\= Out2).



%% tell metagol to use the BK
prim(is_empty/1).
prim(not_empty/1). % maybe?

prim(is_space/1).
prim(not_space/1). % maybe?

prim(is_uppercase/1).
prim(is_lowercase/1).

prim(is_letter/1).
prim(not_letter/1).

prim(is_number/1).
prim(not_number/1).

prim(copy1/2).
prim(skip1/2).
prim(mk_uppercase/2).
prim(mk_lowercase/2).
%% prim(write1/3).

prim(latent329_2/2).
prim(latent447_3/2).
prim(latent2068_3/2).
prim(latent96_2/2).
prim(latent255_2/2).
prim(latent2161_3/2).
prim(latent2107_3/2).
prim(latent505_2/2).
prim(latent79_3/2).
prim(latent531_2/2).
prim(latent10_2/2).
prim(latent11/2).
prim(latent316_2/2).
prim(latent1714_2/2).
prim(latent12_2/2).
prim(latent1776_3/2).
prim(latent1249_2/2).
prim(latent651_2/2).
prim(latent511_2/2).
prim(latent41_2/2).
prim(latent70_3/2).
prim(latent1474_3/2).
prim(latent203_2/2).
prim(latent82_2/2).
prim(latent19_3/2).
prim(latent36_3/2).
prim(latent150_2/2).
prim(latent390_2/2).
prim(latent884_3/2).
prim(latent128_2/2).
prim(latent154_2/2).
prim(latent186_2/2).
prim(latent188_2/2).
prim(latent2089_3/2).
prim(latent17_2/2).
prim(latent687_2/2).
prim(latent49_3/2).
prim(latent2140_3/2).
prim(latent997_2/2).
prim(latent296_2/2).
prim(latent23_2/2).
prim(latent2065_3/2).
prim(latent248_2/2).
prim(latent98_2/2).
prim(latent2097_3/2).
prim(latent332_2/2).
prim(latent603_2/2).
prim(latent42_3/2).
prim(latent105_2/2).
prim(latent310_2/2).
prim(latent275_2/2).
prim(latent1033_3/2).
prim(latent1957_3/2).
prim(latent106_2/2).
prim(latent22_3/2).
prim(latent40_3/2).
prim(latent1625_2/2).
prim(latent1608_2/2).
prim(latent2112_3/2).
prim(latent34_2/2).
prim(latent4_2/2).
prim(latent1064_2/2).
prim(latent2048_3/2).
prim(latent2155_3/2).
prim(latent25_3/2).
prim(latent585_3/2).
prim(latent282_2/2).
prim(latent28_3/2).
prim(latent45_3/2).
prim(latent1003_3/2).
prim(latent1721_3/2).
prim(latent2175_3/2).
prim(latent2/2).
prim(latent583_2/2).
prim(latent846_2/2).
prim(latent111_2/2).
prim(latent305_2/2).
prim(latent2071_3/2).
prim(latent256_2/2).
prim(latent56_3/2).
prim(latent135_2/2).
prim(latent1533_2/2).
prim(latent2187_2/2).
prim(latent26_3/2).
prim(latent1555_2/2).
prim(latent97/2).
prim(latent31_3/2).
prim(latent133_2/2).
prim(latent1488_2/2).
prim(latent21_2/2).
prim(latent13_2/2).
prim(latent1904_2/2).
prim(latent216_2/2).
prim(latent144_2/2).
prim(latent120_2/2).
prim(latent167_2/2).
prim(latent292_2/2).
prim(latent197_2/2).
prim(latent3/2).
prim(latent37_3/2).
prim(latent179_2/2).
prim(latent556_2/2).
prim(latent1391_2/2).
prim(latent1401_3/2).
prim(latent109_2/2).
prim(latent15_2/2).
prim(latent122_2/2).
prim(latent1355_3/2).
prim(latent1811_3/2).
prim(latent2058_3/2).
prim(latent67_3/2).
prim(latent1138_2/2).
prim(latent18_3/2).
prim(latent348_2/2).
prim(latent320_2/2).
prim(latent27_3/2).
prim(latent24_3/2).
prim(latent297_2/2).
prim(latent2132_3/2).
prim(latent561_2/2).
prim(latent582_2/2).
prim(latent349_2/2).
prim(latent1054_2/2).
prim(latent119_2/2).
prim(latent330_3/2).
prim(latent727_2/2).
prim(latent266_2/2).
prim(latent107_2/2).
prim(latent925_2/2).
prim(latent35_3/2).
prim(latent157_2/2).
prim(latent303_2/2).
prim(latent6_2/2).
prim(latent83/2).
prim(latent956_2/2).
prim(latent1_2/2).
prim(latent653_2/2).
prim(latent108_2/2).
prim(latent290_2/2).
prim(latent617_3/2).
prim(latent1456_2/2).
prim(latent104_2/2).
prim(latent811_2/2).
prim(latent339_2/2).
prim(latent2194_2/2).
prim(latent905_3/2).
prim(latent1410_2/2).
prim(latent189_2/2).
prim(latent162_2/2).
prim(latent39_3/2).
prim(latent1118_2/2).
prim(latent140_2/2).
prim(latent250_2/2).
prim(latent1287_3/2).
prim(latent2081_3/2).
prim(latent859_2/2).
prim(latent9_2/2).
prim(latent102_2/2).
prim(latent65_3/2).
prim(latent2147_3/2).
prim(latent134_2/2).
prim(latent123_2/2).
prim(latent103_2/2).
prim(latent99_2/2).
prim(latent126_2/2).
prim(latent408_2/2).
prim(latent2052_3/2).
prim(latent680_2/2).
prim(latent5_2/2).
prim(latent471_2/2).
prim(latent100/2).
prim(latent155_2/2).
prim(latent2144_3/2).
prim(latent2116_3/2).
prim(latent1432_3/2).
prim(latent757_3/2).
prim(latent7_2/2).
prim(latent586_3/2).
prim(latent20_3/2).
prim(latent353_2/2).
prim(latent1086_2/2).
prim(latent245_2/2).
prim(latent459_2/2).
prim(latent243_2/2).
prim(latent32_3/2).
prim(latent268_2/2).
prim(latent29_3/2).
prim(latent2094_3/2).
prim(latent146_2/2).
prim(latent1335_2/2).
prim(latent507_2/2).
prim(latent118_2/2).
prim(latent304_2/2).
prim(latent340_2/2).
prim(latent1756_2/2).
prim(latent568_2/2).
prim(latent301_3/2).
prim(latent94_2/2).
prim(latent30_3/2).
prim(latent8/2).
prim(latent2126_3/2).
prim(latent831_3/2).
prim(latent337_2/2).
prim(latent1920_3/2).
prim(latent38_3/2).
prim(latent2047_3/2).
prim(latent14_2/2).
prim(latent113_2/2).
prim(latent2130_3/2).
prim(latent1695_3/2).
prim(latent295_2/2).
prim(latent125_2/2).
prim(latent43_3/2).
prim(latent1987_3/2).
prim(latent124_2/2).
prim(latent58_3/2).
prim(latent1675_3/2).
prim(latent95_2/2).
prim(latent221_2/2).
prim(latent1277_3/2).
prim(latent1859_3/2).
prim(latent33_3/2).
prim(latent192_2/2).
prim(latent86_3/2).
prim(latent16_3/2).
prim(latent205_2/2).
prim(p4/2).
prim(p5/2).
prim(p11/2).
prim(p13/2).
prim(p15/2).
prim(p21/2).
prim(p22/2).
prim(p34/2).
prim(p42/2).
prim(p47/2).
prim(p76/2).
prim(p153/2).
prim(p225/2).
prim(p345/2).
prim(p2/2).
prim(p8/2).
prim(p12/2).
prim(p27/2).
prim(p54/2).
prim(p82/2).
prim(p110/2).
prim(p111/2).
prim(p137/2).
prim(p148/2).
prim(p163/2).
prim(p172/2).
prim(p189/2).
prim(p220/2).
prim(p275/2).
prim(p288/2).
prim(p334/2).
prim(p362/2).
prim(p373/2).
prim(p392/2).
prim(p462/2).
prim(p467/2).
prim(p480/2).
prim(p591/2).
prim(p7/2).
prim(p17/2).
prim(p26/2).
prim(p30/2).
prim(p38/2).
prim(p39/2).
prim(p41/2).
prim(p46/2).
prim(p48/2).
prim(p58/2).
prim(p63/2).
prim(p74/2).
prim(p90/2).
prim(p100/2).
prim(p102/2).
prim(p119/2).
prim(p122/2).
prim(p129/2).
prim(p146/2).
prim(p165/2).
prim(p204/2).
prim(p219/2).
prim(p231/2).
prim(p240/2).
prim(p262/2).
prim(p376/2).
prim(p385/2).
prim(p389/2).
prim(p395/2).
prim(p400/2).
prim(p419/2).
prim(p427/2).
prim(p430/2).
prim(p453/2).
prim(p471/2).
prim(p489/2).
prim(p517/2).
prim(p526/2).
prim(p533/2).
prim(p566/2).
prim(p574/2).
prim(p590/2).
prim(p10/2).
prim(p29/2).
prim(p31/2).
prim(p44/2).
prim(p45/2).
prim(p75/2).
prim(p124/2).
prim(p130/2).
prim(p175/2).
prim(p182/2).
prim(p184/2).
prim(p212/2).
prim(p242/2).
prim(p242/2).
prim(p259/2).
prim(p268/2).
prim(p272/2).
prim(p279/2).
prim(p279/2).
prim(p329/2).
prim(p332/2).
prim(p342/2).
prim(p351/2).
prim(p363/2).
prim(p371/2).
prim(p378/2).
prim(p384/2).
prim(p410/2).
prim(p424/2).
prim(p433/2).
prim(p446/2).
prim(p486/2).
prim(p498/2).
prim(p504/2).
prim(p509/2).
prim(p558/2).
prim(p570/2).
prim(p583/2).
prim(p587/2).
prim(p1/2).
prim(p72/2).
prim(p78/2).
prim(p95/2).
prim(p98/2).
prim(p140/2).
prim(p168/2).
prim(p180/2).
prim(p238/2).
prim(p291/2).
prim(p309/2).
prim(p463/2).
prim(p99/2).
prim(p156/2).
prim(p190/2).
prim(p193/2).
prim(p198/2).
prim(p224/2).
prim(p248/2).
prim(p295/2).
prim(p317/2).
prim(p350/2).
prim(p352/2).
prim(p382/2).
prim(p401/2).
prim(p487/2).
prim(p528/2).
prim(p546/2).
prim(p571/2).
prim(p594/2).
prim(p40/2).
prim(p52/2).
prim(p57/2).
prim(p79/2).
prim(p132/2).
prim(p173/2).
prim(p196/2).
prim(p205/2).
prim(p233/2).
prim(p286/2).
prim(p294/2).
prim(p302/2).
prim(p312/2).
prim(p365/2).
prim(p379/2).
prim(p415/2).
prim(p425/2).
prim(p434/2).
prim(p441/2).
prim(p540/2).
prim(p578/2).
prim(p593/2).
prim(p3/2).
prim(p32/2).
prim(p37/2).
prim(p67/2).
prim(p68/2).
prim(p89/2).
prim(p131/2).
prim(p154/2).
prim(p170/2).
prim(p176/2).
prim(p178/2).
prim(p178/2).
prim(p179/2).
prim(p186/2).
prim(p245/2).
prim(p252/2).
prim(p263/2).
prim(p277/2).
prim(p280/2).
prim(p296/2).
prim(p301/2).
prim(p355/2).
prim(p390/2).
prim(p391/2).
prim(p418/2).
prim(p490/2).
prim(p499/2).
prim(p524/2).
prim(p527/2).
prim(p582/2).
prim(p598/2).
prim(p600/2).
prim(p51/2).
prim(p188/2).
prim(p386/2).
prim(p465/2).
prim(p9/2).
prim(p25/2).
prim(p25/2).
prim(p43/2).
prim(p61/2).
prim(p64/2).
prim(p66/2).
prim(p87/2).
prim(p87/2).
prim(p88/2).
prim(p96/2).
prim(p97/2).
prim(p117/2).
prim(p127/2).
prim(p135/2).
prim(p139/2).
prim(p151/2).
prim(p159/2).
prim(p194/2).
prim(p206/2).
prim(p226/2).
prim(p234/2).
prim(p236/2).
prim(p249/2).
prim(p282/2).
prim(p323/2).
prim(p343/2).
prim(p396/2).
prim(p405/2).
prim(p413/2).
prim(p426/2).
prim(p431/2).
prim(p444/2).
prim(p452/2).
prim(p477/2).
prim(p497/2).
prim(p507/2).
prim(p532/2).
prim(p543/2).
prim(p557/2).
prim(p573/2).
prim(p588/2).
prim(p70/2).
prim(p109/2).
prim(p335/2).
prim(p354/2).
prim(p14/2).
prim(p19/2).
prim(p28/2).
prim(p33/2).
prim(p49/2).
prim(p84/2).
prim(p106/2).
prim(p121/2).
prim(p128/2).
prim(p133/2).
prim(p138/2).
prim(p143/2).
prim(p147/2).
prim(p152/2).
prim(p181/2).
prim(p195/2).
prim(p201/2).
prim(p223/2).
prim(p232/2).
prim(p235/2).
prim(p266/2).
prim(p285/2).
prim(p289/2).
prim(p324/2).
prim(p326/2).
prim(p330/2).
prim(p341/2).
prim(p370/2).
prim(p374/2).
prim(p381/2).
prim(p388/2).
prim(p403/2).
prim(p422/2).
prim(p451/2).
prim(p478/2).
prim(p482/2).
prim(p484/2).
prim(p491/2).
prim(p511/2).
prim(p515/2).
prim(p516/2).
prim(p518/2).
prim(p548/2).
prim(p551/2).
prim(p563/2).
prim(p579/2).
prim(p585/2).
prim(p595/2).
prim(p24/2).
prim(p36/2).
prim(p83/2).
prim(p93/2).
prim(p94/2).
prim(p115/2).
prim(p123/2).
prim(p149/2).
prim(p162/2).
prim(p192/2).
prim(p217/2).
prim(p247/2).
prim(p255/2).
prim(p257/2).
prim(p267/2).
prim(p299/2).
prim(p310/2).
prim(p315/2).
prim(p320/2).
prim(p328/2).
prim(p331/2).
prim(p360/2).
prim(p361/2).
prim(p364/2).
prim(p380/2).
prim(p420/2).
prim(p421/2).
prim(p459/2).
prim(p508/2).
prim(p521/2).
prim(p531/2).
prim(p536/2).
prim(p542/2).
prim(p577/2).
prim(p483/2).
prim(p73/2).
prim(p73/2).
prim(p269/2).
prim(p269/2).
prim(p101/2).
prim(p101/2).
prim(p502/2).
prim(p502/2).
prim(p177/2).
prim(p177/2).
prim(p369/2).
prim(p369/2).

metarule(precon,[P/2,Q/1,R/2],([P,A,B]:-[[Q,A],[R,A,B]])).
metarule(postcon,[P/2,Q/2,R/1],([P,A,B]:-[[Q,A,B],[R,B]])).
metarule(chain,[P/2,Q/2,R/2],([P,A,B]:-[[Q,A,C],[R,C,B]])).
metarule(tailrec,[P/2,Q/2],([P,A,B]:-[[Q,A,C],[P,C,B]])).
%% metarule(curry3,[P/2,Q/3,C/0],([P,A,B]:-[[Q,A,B,C]])).

  
a:-
    cpus(CPU_COUNT),
    set_prolog_flag(cpu_count,CPU_COUNT),
    games(Games),
    playgol(Games),
    b,
    halt.

b:-
    cpus(CPU_COUNT),
    set_prolog_flag(cpu_count,CPU_COUNT),
    %get_time(T),
    %stamp_date_time(T, date(DY,DM,DD,TH,TM,TS,_,_,_), 'UTC'),
    %format('% started solving build tasks at ~w ~w ~w ~w:~w:~w\n', [DD, DM, DY, TH, TM, TS]),
    max_build_depth(BuildDepth),
    playgol:update_depth(BuildDepth),
    max_build_time(BuildTime),
    retractall(max_time(_)),
    assert(max_time(BuildTime)),
    tasks(Tasks),
    learn_tasks(Tasks,Progs),
    length(Progs,N),
    format('% num solved ~w\n',[N]),
    %get_time(T2),
    %stamp_date_time(T2, date(DY2,DM2,DD2,TH2,TM2,TS2,_,_,_), 'UTC'),
    %format('% finished solving build tasks at ~w ~w ~w ~w:~w:~w\n', [DD2, DM2, DY2, TH2, TM2, TS2]),
    halt.

learn_tasks(Tasks,Progs):-
    concurrent_maplist(learn_aux,Tasks,Xs),
    findall(true,member(true,Xs),Progs).

learn_aux(T,true):-
    train_examples(T,Pos,Neg),
    max_time(MaxTime),
    get_time(TTT),
    stamp_date_time(TTT, date(DY,DM,DD,TH,TM,TS,_,_,_), 'UTC'),
    format('% started solving build task at ~w ~w ~w ~w:~w:~w\n', [DD, DM, DY, TH, TM, TS]),
    catch(call_with_time_limit(MaxTime,learn(Pos,Neg,Prog)),time_limit_exceeded,(writeln('%timeout'),false)),!,
    get_time(TTT2),
    stamp_date_time(TTT2, date(DY2,DM2,DD2,TH2,TM2,TS2,_,_,_), 'UTC'),
    format('% finished solving build tasks at ~w ~w ~w ~w:~w:~w\n', [DD2, DM2, DY2, TH2, TM2, TS2]),
    pprint(Prog).
learn_aux(_,false).

do_test:-
    tasks(Tasks),
    maplist(do_test,Tasks),
    halt.

do_test(Task):-
    test_examples(Task,Pos),
    (current_predicate(Task/2) ->
        (
            format('%solved,~w,~w\n',[Task,1]),
            forall(member(X,Pos),(call(X) -> format('~w,~w\n',[1,1]); format('~w,~w\n',[1,0])))
        );
        (
            format('%solved,~w,~w\n',[Task,0]),
            forall(member(_,Pos),format('~w,~w\n',[0,0]))
        )).

gen_e(Task,Input,Output,Out):-
    Out=..[Task,s(Input,Output),s(_,[])].

play_examples(Task,Pos,[]):-
    findall(X,(play_pos(Task,A,B),gen_e(Task,A,B,X)),Pos1),
    sort_examples(Pos1,Pos).

train_examples(Task,Pos,[]):-
    findall(X,(build_pos(Task,A,B),gen_e(Task,A,B,X)),Pos1),
    sort_examples(Pos1,Pos).

test_examples(Task,Pos):-
    findall(X,(test_pos(Task,A,B),gen_e(Task,A,B,X)),Pos).

add_len(Atom,Len-Atom):-
    Atom=..[_Task,s(Input,_Output),s(_,[])],
    length(Input,Len).
remove_len(_-Atom,Atom).

sort_examples(L1,L2):-
  maplist(add_len,L1,L3),
  keysort(L3,L4),
  maplist(remove_len,L4,L2).

