
:-['../playgol'].
:-['string-bk'].
:-['../metagol'].

:-['./programs_pncorrect/literals2-3_layer5_time5400s_pruneTrue_altFalse_rcandsTrue_rrTrue_mrTrue_singlTrue/refactored_primitives-400-1.pl'].



:- use_module(library(time)).

play_time_interval(2).
max_build_time(60).
max_play_depth(4).
max_build_depth(5).
cpus(4).

metagol:functional.
%% metagol:max_clauses(10).

func_test([P,s(In,Out1),s(_,[])],PS,G):-
  \+ (metagol :prove_deduce([[P,s(In,Out2),s(_,[])]],PS,G),Out1\= Out2).



%% tell metagol to use the BK
prim(is_empty/1).
prim(not_empty/1). % maybe?

prim(is_space/1).
prim(not_space/1). % maybe?

prim(is_uppercase/1).
prim(is_lowercase/1).

prim(is_letter/1).
prim(not_letter/1).

prim(is_number/1).
prim(not_number/1).

prim(copy1/2).
prim(skip1/2).
prim(mk_uppercase/2).
prim(mk_lowercase/2).
%% prim(write1/3).

prim(latent119_2/2).
prim(latent554_3/2).
prim(latent27_2/2).
prim(latent144_2/2).
prim(latent642_3/2).
prim(latent110_2/2).
prim(latent1098_2/2).
prim(latent38_2/2).
prim(latent74_3/2).
prim(latent11_2/2).
prim(latent116_2/2).
prim(latent1088_2/2).
prim(latent913_2/2).
prim(latent92_2/2).
prim(latent190_2/2).
prim(latent21_3/2).
prim(latent7_2/2).
prim(latent94_3/2).
prim(latent890_3/2).
prim(latent97_3/2).
prim(latent579_3/2).
prim(latent671_3/2).
prim(latent769_2/2).
prim(latent1116_2/2).
prim(latent22_3/2).
prim(latent528_3/2).
prim(latent86_3/2).
prim(latent682_3/2).
prim(latent5_2/2).
prim(latent630_3/2).
prim(latent41_3/2).
prim(latent283_2/2).
prim(latent232_2/2).
prim(latent206_2/2).
prim(latent194_2/2).
prim(latent241_2/2).
prim(latent14_3/2).
prim(latent78/2).
prim(latent25_3/2).
prim(latent456_3/2).
prim(latent58_3/2).
prim(latent1024_3/2).
prim(latent597_3/2).
prim(latent132_2/2).
prim(latent141_2/2).
prim(latent120_2/2).
prim(latent434_3/2).
prim(latent895_3/2).
prim(latent1036_3/2).
prim(latent951_3/2).
prim(latent277_2/2).
prim(latent115_2/2).
prim(latent90_3/2).
prim(latent509_2/2).
prim(latent197_2/2).
prim(latent265_2/2).
prim(latent128_2/2).
prim(latent573_3/2).
prim(latent155_2/2).
prim(latent42_2/2).
prim(latent6/2).
prim(latent1300_2/2).
prim(latent20_3/2).
prim(latent65_3/2).
prim(latent57_3/2).
prim(latent166_3/2).
prim(latent45_3/2).
prim(latent126_2/2).
prim(latent19_3/2).
prim(latent782_2/2).
prim(latent52_3/2).
prim(latent71_3/2).
prim(latent281_2/2).
prim(latent656_3/2).
prim(latent68_3/2).
prim(latent897_3/2).
prim(latent99_2/2).
prim(latent1241_2/2).
prim(latent1392_3/2).
prim(latent255_2/2).
prim(latent259_2/2).
prim(latent300_2/2).
prim(latent750_2/2).
prim(latent1/2).
prim(latent482_3/2).
prim(latent85_3/2).
prim(latent2/2).
prim(latent662_3/2).
prim(latent1301_2/2).
prim(latent633_3/2).
prim(latent95_2/2).
prim(latent178_2/2).
prim(latent223_2/2).
prim(latent245_2/2).
prim(latent117_3/2).
prim(latent1191_2/2).
prim(latent39_3/2).
prim(latent286_2/2).
prim(latent618_3/2).
prim(latent46_3/2).
prim(latent439_2/2).
prim(latent260_2/2).
prim(latent215_2/2).
prim(latent470_3/2).
prim(latent736_2/2).
prim(latent225_2/2).
prim(latent8_2/2).
prim(latent285_2/2).
prim(latent62_3/2).
prim(latent649_3/2).
prim(latent145_2/2).
prim(latent16_2/2).
prim(latent35_3/2).
prim(latent841_2/2).
prim(latent481_2/2).
prim(latent93_2/2).
prim(latent188_2/2).
prim(latent1053_2/2).
prim(latent73_3/2).
prim(latent9_2/2).
prim(latent569_3/2).
prim(latent28_3/2).
prim(latent3/2).
prim(latent966_2/2).
prim(latent10_2/2).
prim(latent1151_3/2).
prim(latent280_2/2).
prim(latent212_2/2).
prim(latent36_3/2).
prim(latent199_2/2).
prim(latent1259_2/2).
prim(latent202_2/2).
prim(latent239_2/2).
prim(latent297_2/2).
prim(latent216_2/2).
prim(latent1218_2/2).
prim(latent84_3/2).
prim(latent848_2/2).
prim(latent67_3/2).
prim(latent941_2/2).
prim(latent75_3/2).
prim(latent130_2/2).
prim(latent153_2/2).
prim(latent347_2/2).
prim(latent614_3/2).
prim(latent646_3/2).
prim(latent49_3/2).
prim(latent31_3/2).
prim(latent4_2/2).
prim(latent26_3/2).
prim(latent12_2/2).
prim(latent268_2/2).
prim(latent113_2/2).
prim(latent48_2/2).
prim(p7/2).
prim(p11/2).
prim(p13/2).
prim(p16/2).
prim(p21/2).
prim(p25/2).
prim(p39/2).
prim(p68/2).
prim(p128/2).
prim(p142/2).
prim(p238/2).
prim(p2/2).
prim(p102/2).
prim(p106/2).
prim(p202/2).
prim(p220/2).
prim(p259/2).
prim(p281/2).
prim(p297/2).
prim(p308/2).
prim(p331/2).
prim(p378/2).
prim(p14/2).
prim(p45/2).
prim(p61/2).
prim(p62/2).
prim(p79/2).
prim(p82/2).
prim(p124/2).
prim(p126/2).
prim(p136/2).
prim(p163/2).
prim(p330/2).
prim(p382/2).
prim(p397/2).
prim(p400/2).
prim(p234/2).
prim(p328/2).
prim(p4/2).
prim(p8/2).
prim(p23/2).
prim(p31/2).
prim(p38/2).
prim(p41/2).
prim(p57/2).
prim(p75/2).
prim(p85/2).
prim(p95/2).
prim(p149/2).
prim(p172/2).
prim(p194/2).
prim(p211/2).
prim(p241/2).
prim(p245/2).
prim(p251/2).
prim(p267/2).
prim(p269/2).
prim(p271/2).
prim(p282/2).
prim(p301/2).
prim(p304/2).
prim(p305/2).
prim(p315/2).
prim(p337/2).
prim(p353/2).
prim(p369/2).
prim(p373/2).
prim(p385/2).
prim(p392/2).
prim(p15/2).
prim(p33/2).
prim(p63/2).
prim(p66/2).
prim(p81/2).
prim(p164/2).
prim(p225/2).
prim(p332/2).
prim(p365/2).
prim(p366/2).
prim(p371/2).
prim(p303/2).
prim(p5/2).
prim(p26/2).
prim(p42/2).
prim(p43/2).
prim(p47/2).
prim(p58/2).
prim(p59/2).
prim(p92/2).
prim(p107/2).
prim(p112/2).
prim(p131/2).
prim(p132/2).
prim(p153/2).
prim(p178/2).
prim(p232/2).
prim(p270/2).
prim(p307/2).
prim(p314/2).
prim(p334/2).
prim(p351/2).
prim(p364/2).
prim(p383/2).
prim(p37/2).
prim(p167/2).
prim(p9/2).
prim(p10/2).
prim(p18/2).
prim(p22/2).
prim(p60/2).
prim(p76/2).
prim(p84/2).
prim(p97/2).
prim(p109/2).
prim(p113/2).
prim(p140/2).
prim(p143/2).
prim(p150/2).
prim(p156/2).
prim(p169/2).
prim(p210/2).
prim(p230/2).
prim(p254/2).
prim(p306/2).
prim(p309/2).
prim(p354/2).
prim(p3/2).
prim(p6/2).
prim(p34/2).
prim(p53/2).
prim(p74/2).
prim(p88/2).
prim(p189/2).
prim(p196/2).
prim(p213/2).
prim(p227/2).
prim(p248/2).
prim(p261/2).
prim(p275/2).
prim(p286/2).
prim(p294/2).
prim(p317/2).
prim(p321/2).
prim(p333/2).
prim(p372/2).
prim(p394/2).
prim(p110/2).
prim(p133/2).
prim(p138/2).
prim(p139/2).
prim(p199/2).
prim(p343/2).
prim(p357/2).
prim(p19/2).
prim(p35/2).
prim(p40/2).
prim(p46/2).
prim(p55/2).
prim(p56/2).
prim(p96/2).
prim(p118/2).
prim(p122/2).
prim(p154/2).
prim(p173/2).
prim(p195/2).
prim(p217/2).
prim(p222/2).
prim(p246/2).
prim(p316/2).
prim(p326/2).
prim(p339/2).
prim(p360/2).
prim(p388/2).
prim(p1/2).
prim(p20/2).
prim(p24/2).
prim(p28/2).
prim(p52/2).
prim(p65/2).
prim(p71/2).
prim(p86/2).
prim(p94/2).
prim(p141/2).
prim(p155/2).
prim(p161/2).
prim(p175/2).
prim(p190/2).
prim(p201/2).
prim(p272/2).
prim(p284/2).
prim(p293/2).
prim(p329/2).
prim(p370/2).
prim(p374/2).
prim(p17/2).
prim(p29/2).
prim(p280/2).
prim(p327/2).
prim(p367/2).
prim(p51/2).
prim(p73/2).
prim(p80/2).
prim(p80/2).
prim(p108/2).
prim(p123/2).
prim(p146/2).
prim(p243/2).
prim(p258/2).
prim(p258/2).
prim(p260/2).
prim(p300/2).
prim(p311/2).
prim(p64/2).
prim(p119/2).
prim(p162/2).
prim(p361/2).
prim(p375/2).
prim(p252/2).
prim(p386/2).
prim(p130/2).
prim(p130/2).
prim(p181/2).
prim(p181/2).
prim(p289/2).
prim(p289/2).

metarule(precon,[P/2,Q/1,R/2],([P,A,B]:-[[Q,A],[R,A,B]])).
metarule(postcon,[P/2,Q/2,R/1],([P,A,B]:-[[Q,A,B],[R,B]])).
metarule(chain,[P/2,Q/2,R/2],([P,A,B]:-[[Q,A,C],[R,C,B]])).
metarule(tailrec,[P/2,Q/2],([P,A,B]:-[[Q,A,C],[P,C,B]])).
%% metarule(curry3,[P/2,Q/3,C/0],([P,A,B]:-[[Q,A,B,C]])).

  
a:-
    cpus(CPU_COUNT),
    set_prolog_flag(cpu_count,CPU_COUNT),
    games(Games),
    playgol(Games),
    b,
    halt.

b:-
    cpus(CPU_COUNT),
    set_prolog_flag(cpu_count,CPU_COUNT),
    %get_time(T),
    %stamp_date_time(T, date(DY,DM,DD,TH,TM,TS,_,_,_), 'UTC'),
    %format('% started solving build tasks at ~w ~w ~w ~w:~w:~w\n', [DD, DM, DY, TH, TM, TS]),
    max_build_depth(BuildDepth),
    playgol:update_depth(BuildDepth),
    max_build_time(BuildTime),
    retractall(max_time(_)),
    assert(max_time(BuildTime)),
    tasks(Tasks),
    learn_tasks(Tasks,Progs),
    length(Progs,N),
    format('% num solved ~w\n',[N]),
    %get_time(T2),
    %stamp_date_time(T2, date(DY2,DM2,DD2,TH2,TM2,TS2,_,_,_), 'UTC'),
    %format('% finished solving build tasks at ~w ~w ~w ~w:~w:~w\n', [DD2, DM2, DY2, TH2, TM2, TS2]),
    halt.

learn_tasks(Tasks,Progs):-
    concurrent_maplist(learn_aux,Tasks,Xs),
    findall(true,member(true,Xs),Progs).

learn_aux(T,true):-
    train_examples(T,Pos,Neg),
    max_time(MaxTime),
    get_time(TTT),
    stamp_date_time(TTT, date(DY,DM,DD,TH,TM,TS,_,_,_), 'UTC'),
    format('% started solving build task at ~w ~w ~w ~w:~w:~w\n', [DD, DM, DY, TH, TM, TS]),
    catch(call_with_time_limit(MaxTime,learn(Pos,Neg,Prog)),time_limit_exceeded,(writeln('%timeout'),false)),!,
    get_time(TTT2),
    stamp_date_time(TTT2, date(DY2,DM2,DD2,TH2,TM2,TS2,_,_,_), 'UTC'),
    format('% finished solving build tasks at ~w ~w ~w ~w:~w:~w\n', [DD2, DM2, DY2, TH2, TM2, TS2]),
    pprint(Prog).
learn_aux(_,false).

do_test:-
    tasks(Tasks),
    maplist(do_test,Tasks),
    halt.

do_test(Task):-
    test_examples(Task,Pos),
    (current_predicate(Task/2) ->
        (
            format('%solved,~w,~w\n',[Task,1]),
            forall(member(X,Pos),(call(X) -> format('~w,~w\n',[1,1]); format('~w,~w\n',[1,0])))
        );
        (
            format('%solved,~w,~w\n',[Task,0]),
            forall(member(_,Pos),format('~w,~w\n',[0,0]))
        )).

gen_e(Task,Input,Output,Out):-
    Out=..[Task,s(Input,Output),s(_,[])].

play_examples(Task,Pos,[]):-
    findall(X,(play_pos(Task,A,B),gen_e(Task,A,B,X)),Pos1),
    sort_examples(Pos1,Pos).

train_examples(Task,Pos,[]):-
    findall(X,(build_pos(Task,A,B),gen_e(Task,A,B,X)),Pos1),
    sort_examples(Pos1,Pos).

test_examples(Task,Pos):-
    findall(X,(test_pos(Task,A,B),gen_e(Task,A,B,X)),Pos).

add_len(Atom,Len-Atom):-
    Atom=..[_Task,s(Input,_Output),s(_,[])],
    length(Input,Len).
remove_len(_-Atom,Atom).

sort_examples(L1,L2):-
  maplist(add_len,L1,L3),
  keysort(L3,L4),
  maplist(remove_len,L4,L2).

